[
    "{\n    \"flask_app/app.py\": \"Main Flask application file that initializes the app, sets up templates and static files, configures the app using Config class, initializes the database, and sets up routes for various pages including home, register, login, dashboard, and stock. It also loads Parquet data at startup and includes authentication logic.\",\n    \"flask_app/auth.py\": \"Handles user authentication using Flask-Login and Werkzeug password hashing. Contains functions for logging in users and registering new users.\",",
    "```json\n{\n    \"flask_app/data_loader/data_loader.py\": \"Imports pandas and os to load Parquet files into DataFrames. Contains a function to read Parquet files, handling exceptions, and returning DataFrames or None on failure.\",\n    \"flask_app/data_loader/data_processor.py\": \"Processes stock data for visualization by calculating moving averages and handling strategy configurations. Includes functions for processing main stock data and strategy-specific data.\",\n    \"flask_app/data_loader/__init__.py\": \"Empty file serving as a package initializer.\",\n    \"flask_app/static/css/dashboard.css\": \"Contains styles for buttons, input groups, and other UI elements with a dark theme.\",\n    \"flask_app/static/css/global.css\": \"Applies a dark theme with styles for containers, inputs, buttons, and messages, including responsive design elements.\"\n}\n```",
    "```json\n{\n    \"flask_app/static/css/index.css\": \"Base CSS file with dark theme, gradient background, and styles for the main home page container, including a frosted glass effect and hover transitions.\",\n    \"flask_app/static/css/login.css\": \"Login page CSS with form elements, input fields, and a prominent login button with hover effects.\",\n    \"flask_app/static/css/register.css\": \"Registration page CSS with form elements, input fields, and a registration link",
    "{\n    \"flask_app/static/js/subchart_manager.js\": \"Manages subcharts creation and updates. Dynamically generates subchart elements based on a specified count. Each subchart includes a strategy selector",
    "```json\n{\n    \"flask_app/strategies/TechnicalStrategies.py\": \"This file contains strategy classes for technical indicators. It defines RSI (RSI indicator), MACD (MACD indicator with parameters), and Volume strategies that compute and return respective metrics.\",\n    \"flask_app/strategies/__init__.py\": \"An empty file acting as a package initializer for strategies.\",\n    \"flask_app/templates/dashboard.html\": \"A dashboard template with user welcome message and navigation buttons for analyzing stocks and logging out.\",\n    \"flask_app/templates/index.html\": \"A home page template with a welcome message and login link.\",\n    \"flask_app/templates/login.html\": \"A login form template with username, password fields,",
    "{\n    \"flask_app/templates/register.html\": \"Registration page with form fields for username, email, password, and confirm password. Includes a link to login and displays flashed messages.\",\n    \"flask_app/templates/stock.html\": \"Stock analysis page with a chart container, search input for stock codes, subchart controls, and a reset button. Uses ECharts for visualization.\"\n}"
]