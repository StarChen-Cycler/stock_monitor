{
    "flask_app/app.py": "import os\nimport requests\nfrom flask import Flask,render_template_string, render_template, redirect, url_for, request, flash\nfrom flask_login import LoginManager, login_required, logout_user, login_user, current_user\nfrom auth import authenticate_user, register_user\nfrom flask_migrate import Migrate\nfrom models import db, User, init_db\nfrom config import Config\nfrom flask import jsonify\nfrom data_loader.data_loader import load_parquet\nfrom data_loader.data_processor import process_main_stock_data, process_strategy_data\nfrom strategies.StrategyManager import StrategyManager\n\n# ================== 配置区域 ==================\n# Define the base path of the app\nbase_path = os.path.abspath(os.path.dirname(__file__))\n\n# Folder paths\nTEMPLATES_FOLDER = os.path.join(base_path, 'templates')\nSTATIC_FOLDER = os.path.join(base_path, 'static')\nprint('TEMPLATES_FOLDER:', TEMPLATES_FOLDER)\nprint('STATIC_FOLDER:', STATIC_FOLDER)\n\nINDEX_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'index.html')\nREGISTER_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'register.html')\nLOGIN_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'login.html')\nSTOCK_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'stock.html')\nCHAT_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'chat.html')\n# ================== 初始化区域 ==================\n# Initialize Flask app with template and static folder paths\napp = Flask(__name__, template_folder=TEMPLATES_FOLDER, static_folder=STATIC_FOLDER)\napp.config.from_object(Config)\n\n\n# Initialize database\ndb.init_app(app)\n\n# Initialize Flask-Migrate\nmigrate = Migrate(app, db)\n\n# Load Parquet file at app startup\nparquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data', 'merged_data.parquet'))\ndf = load_parquet(parquet_file_path)\n\n# Initialize LoginManager\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\n\n# User loader callback\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.before_first_request\ndef create_tables():\n    init_db(app)\n\n# Root route\n@app.route('/')\ndef home():\n    with open(INDEX_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content)\n\n# Register page route\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        email = request.form['email']\n        password = request.form['password']\n        password2 = request.form['password2']\n\n        # Check if passwords match\n        if password != password2:\n            flash('Passwords do not match', 'danger')\n            return redirect(url_for('register'))\n\n        # Register the user\n        if register_user(username, email, password):\n            flash('Account created successfully! You can now login.', 'success')\n            return redirect(url_for('login'))\n        else:\n            flash('User already exists.', 'danger')\n            return redirect(url_for('register'))\n\n    with open(REGISTER_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content)\n\n# Login page route\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        remember = 'remember' in request.form  # True if checkbox is checked\n        user = authenticate_user(username, password)\n        if user:\n            login_user(user, remember=remember)  # Pass 'remember' to login_user\n            return redirect(url_for('dashboard'))\n        else:\n            flash('Invalid username or password', 'danger')  # Flash error message\n    with open(LOGIN_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content)\n\n# Logout route\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('login'))\n\n# Protected page (only accessible by logged-in users)\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    return render_template('dashboard.html', username=current_user.username)\n\n# Add a new route for the stock page\n@app.route('/stock')\n@login_required\ndef stock():\n    with open(STOCK_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content, username=current_user.username)\n    # return render_template('stock.html', username=current_user.username)\n\n@app.route('/stock_data', methods=['GET', 'POST'])\n@login_required\ndef stock_data():\n    if request.method == 'POST':\n        request_data = request.json\n        ts_code = request_data.get('ts_code')\n        strategies = request_data.get('strategies', [])\n    else:\n        ts_code = request.args.get('ts_code')\n        strategies = []\n\n    if not strategies:\n        available_strategies = StrategyManager.available_strategies()  # Get all strategies dynamically\n        strategies = [{'name': strategy, 'params': {**StrategyManager.get_strategy(strategy).get_input_parameters()}} for strategy in available_strategies]\n\n    if not ts_code:\n        return jsonify({'error': 'Missing ts_code'}), 400\n    \n    stock_data = df[df['ts_code'] == ts_code]\n    if stock_data.empty:\n        return jsonify({'error': 'No data found'}), 404\n\n    # Process main stock data\n    main_data = process_main_stock_data(stock_data)\n\n    # Process strategies\n    strategy_results = process_strategy_data(stock_data, strategies)\n\n    # Combine results\n    response = {\n        'main': main_data,\n        'strategies': strategy_results\n    }\n\n    return jsonify(response)\n\n# Add a new route for the chatbox page\n# @app.route('/chat')\n# @login_required\n# def chat():\n#     with open(CHAT_TEMPLATE_PATH, 'r') as file:\n#         html_content = file.read()\n#     return render_template_string(html_content, username=current_user.username)\n\n# Added new endpoint for chat messages\n@app.route('/chat_message', methods=['POST'])\n@login_required\ndef chat_message():\n    user_message = request.json.get('message', '')\n    if not user_message:\n        return jsonify({\"error\": \"No message provided\"}), 400\n\n    url = \"https://api.siliconflow.cn/v1/chat/completions\"\n    payload = {\n        \"model\": \"deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B\",\n        \"messages\": [\n            {\"role\": \"user\", \"content\": user_message}\n        ],\n        \"stream\": False,\n        \"max_tokens\": 512,\n        \"stop\": [\"null\"],\n        \"temperature\": 0.7,\n        \"top_p\": 0.7,\n        \"top_k\": 50,\n        \"frequency_penalty\": 0.5,\n        \"n\": 1,\n        \"response_format\": {\"type\": \"text\"}\n    }\n    headers = {\n        \"Authorization\": \"Bearer sk-pslfsadqmaolfpncuucdtiytsumfckvnlvpfukvbalovxujs\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    try:\n        api_response = requests.post(url, json=payload, headers=headers)\n        data = api_response.json()\n        content = data.get(\"choices\", [{}])[0].get(\"message\", {}).get(\"content\", \"\")\n        return jsonify({\"response\": content})\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n",
    "flask_app/auth.py": "from flask_login import login_user\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom flask import flash\nfrom models import User, db\n\n# Authentication logic\ndef authenticate_user(username, password):\n    user = User.query.filter_by(username=username).first()\n    if user and user.check_password(password):\n        return user  # Return the user object\n    return None  # Return None if authentication fails\n\n# Registration logic\ndef register_user(username, email, password):\n    # Check if the user already exists\n    if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():\n        return False  # User already exists\n\n    # Create a new user\n    user = User(username=username, email=email)\n    user.set_password(password)  # Set the password using hash\n    db.session.add(user)\n    db.session.commit()  # Save the new user in the database\n    return True\n",
    "flask_app/config.py": "import os\nfrom datetime import timedelta\n\nclass Config:\n    SECRET_KEY = os.urandom(24)  # Used for encrypting sessions and tokens\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///site.db'  # SQLite database path\n    SQLALCHEMY_TRACK_MODIFICATIONS = False  # Disable SQLAlchemy's object modification tracking\n    SESSION_COOKIE_NAME = 'flask_session_cookie'  # Custom cookie name\n    REMEMBER_COOKIE_DURATION = timedelta(days=30)",
    "flask_app/models.py": "from flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_login import UserMixin\nfrom datetime import datetime\n\n# Initialize the SQLAlchemy instance\ndb = SQLAlchemy()\n\n# User model\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(120), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128), nullable=False)\n\n    def __repr__(self):\n        return f\"User('{self.username}', '{self.email}')\"\n\n    # Set password (hash the password)\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    # Check password (validate if the entered password is correct)\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass StrategyResult(db.Model):\n    \"\"\"Model for storing strategy calculation results.\"\"\"\n    __tablename__ = 'strategy_results'\n\n    id = db.Column(db.Integer, primary_key=True)\n    ts_code = db.Column(db.String(10), nullable=False)\n    strategy_name = db.Column(db.String(50), nullable=False)\n    params_hash = db.Column(db.String(64), nullable=False)  # Hash of strategy parameters\n    result_data = db.Column(db.JSON, nullable=False)  # Store strategy results as JSON\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    __table_args__ = (\n        db.Index('idx_strategy_lookup', 'ts_code', 'strategy_name', 'params_hash', unique=True),\n    )\n\n    def __repr__(self):\n        return f'<StrategyResult {self.strategy_name} for {self.ts_code}>'\n\n# Initialize database (create tables)\ndef init_db(app):\n    with app.app_context():\n        db.create_all()  # This creates the tables in the database\n",
    "flask_app/requirements.txt": "\nFlask==2.0.3\nFlask-Login==0.5.0\nFlask-SQLAlchemy==2.5.1\nFlask-Migrate==3.1.0\nWerkzeug==2.0.3\n",
    "flask_app/strategy_monitor.log": "2025-02-18 09:59:00,221 - INFO - Starting strategy monitor...\n2025-02-18 09:59:42,549 - INFO - Sleeping for 60 minutes...\n2025-02-18 10:12:08,083 - INFO - Starting strategy monitor...\n2025-02-18 10:16:37,633 - INFO - Starting strategy monitor...\n2025-02-18 10:16:38,021 - INFO - Sleeping for 60 minutes...\n2025-02-18 10:17:34,180 - INFO - Starting strategy monitor...\n2025-02-18 10:17:34,258 - INFO - Sleeping for 60 minutes...\n2025-02-18 10:19:26,279 - INFO - Starting strategy monitor...\n2025-02-18 10:19:26,358 - INFO - Sleeping for 60 minutes...\n2025-02-18 10:20:56,895 - INFO - Starting strategy monitor...\n2025-02-18 10:21:20,415 - ERROR - Error in process_new_strategies: could not convert string to float: 'open'\n2025-02-18 10:21:20,654 - INFO - Sleeping for 60 minutes...\n2025-02-18 10:23:56,106 - INFO - Starting strategy monitor...\n2025-02-18 10:39:26,012 - INFO - Starting strategy monitor...\n2025-02-18 10:42:11,173 - INFO - Starting strategy monitor...\n2025-02-18 10:45:38,610 - INFO - Starting strategy monitor...\n2025-02-18 10:57:22,528 - ERROR - Error in batch saving results: (sqlite3.IntegrityError) UNIQUE constraint failed: strategy_results.ts_code, strategy_results.strategy_name, strategy_results.params_hash\n[SQL: INSERT INTO strategy_results (ts_code, strategy_name, params_hash, result_data, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)]\n[parameters: (('00001', 'lowest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"lowest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 ... (18469 characters truncated) ...  \"chart_name\": \"lowest_volume_today\", \"outputs\": {\"lowest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"lowest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'highest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"highest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  ... (18474 characters truncated) ... hart_name\": \"highest_volume_today\", \"outputs\": {\"highest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"highest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'days_since_last_low', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_lowest_vol\": [0, 0, 0, 0, 0, 0, 5, 6, 0, 1, 0, 1, 2, 3, 4, 5, 6, 4, 5, 6, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 6, 3, 0, 0, 1, 0, 0, 1, ... (18484 characters truncated) ... me\": \"days_since_last_low\", \"outputs\": {\"days_since_lowest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_lowest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'days_since_last_high', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_highest_vol\": [0, 0, 0, 0, 0, 0, 3, 4, 5, 6, 4, 5, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 0, 0, 1, 2, 3, 4, 5, 6, 4, 5, 6, 6, 6 ... (18489 characters truncated) ... : \"days_since_last_high\", \"outputs\": {\"days_since_highest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_highest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'macd', '611d5f9748081b37f6fe0ce153b4703ea1e706faa44f005db4a60c35b5a56841', '{\"data\": {\"macd\": [0.0, -0.2592592592592595, -1.0178326474622779, -1.9595316536331637, -2.5553410555774967, -2.8933074980629137, -2.9655796966134496, ... (381365 characters truncated) ... pe\": \"line\", \"name\": \"Signal Line\", \"order\": 2}, \"histogram\": {\"type\": \"bar\", \"name\": \"MACD Histogram\", \"order\": 0, \"use_color_from\": \"histogram\"}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'volume', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"volume\": [25975.0, 22831.0, 43301.0, 74620.0, 43238.0, 37132.0, 44140.0, 38980.0, 25014.0, 27899.0, 22206.0, 34817.0, 56649.0, 30347.0, 42 ... (55914 characters truncated) ... roup\": \"volume_analysis\", \"chart_name\": \"Volume Analysis\", \"outputs\": {\"volume\": {\"color\": \"#FFA07A\", \"type\": \"bar\", \"name\": \"Volume\", \"order\": 1}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'relative_return', '5eb82dfaddccc4fa1c21ac16f09f2db501ded2f0e3fdfe5862879c3393b2571a', '{\"data\": {\"relative_return_5_20\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.09537224520 ... (132183 characters truncated) ... \"Relative Return Analysis\", \"outputs\": {\"relative_return_5_20\": {\"color\": \"#4169E1\", \"type\": \"line\", \"name\": \"Relative Return (5,20)\", \"order\": 1}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'rsi', '2aef37bb7414c1f2befc26acfed0618fb29d06db6d0b4e37d099fb278abaa557', '{\"data\": {\"rsi\": [0.0, 0.0, 0.0, 0.0, 9.230769230769226, 15.714285714285708, 29.23076923076924, 44.1860465116279, 63.33333333333333, 46.4285714285714 ... (110178 characters truncated) ... 999998]}, \"config\": {\"chart_group\": \"rsi\", \"chart_name\": \"rsi\", \"outputs\": {\"rsi\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"rsi\", \"order\": 1}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'), ('00001', 'ma', '00bd8c50107d25d121661de490eb38224902e4522d8762c95a159950ec36a966', '{\"data\": {\"ma5\": [25.776999999999997, 25.776999999999997, 25.776999999999997, 25.776999999999997, 25.776999999999997, 23.377000000000002, 22.02700000 ... (225099 characters truncated) ... \"ma10\": {\"color\": \"#06a7a0\", \"type\": \"line\", \"name\": \"MA10\", \"order\": 2}, \"ma20\": {\"color\": \"#3c763d\", \"type\": \"line\", \"name\": \"MA20\", \"order\": 3}}}}', '2025-02-18 02:57:22.498996', '2025-02-18 02:57:22.498996'))]\n(Background on this error at: https://sqlalche.me/e/14/gkpj)\n2025-02-18 10:57:23,396 - ERROR - Error in batch saving results: (sqlite3.IntegrityError) UNIQUE constraint failed: strategy_results.ts_code, strategy_results.strategy_name, strategy_results.params_hash\n[SQL: INSERT INTO strategy_results (ts_code, strategy_name, params_hash, result_data, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)]\n[parameters: (('00002', 'highest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"highest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  ... (18492 characters truncated) ... hart_name\": \"highest_volume_today\", \"outputs\": {\"highest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"highest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'lowest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"lowest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ... (18487 characters truncated) ...  \"chart_name\": \"lowest_volume_today\", \"outputs\": {\"lowest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"lowest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'days_since_last_low', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_lowest_vol\": [0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 6, 1, 2, 3, 4, 5, 6, 6, 0, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1, ... (18502 characters truncated) ... me\": \"days_since_last_low\", \"outputs\": {\"days_since_lowest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_lowest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'days_since_last_high', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_highest_vol\": [0, 0, 0, 0, 0, 0, 3, 4, 5, 6, 1, 2, 0, 1, 2, 3, 4, 5, 6, 0, 0, 1, 2, 0, 1, 2, 3, 0, 0, 1, 2, 0, 1, 2, 3, 4, 5, 6 ... (18507 characters truncated) ... : \"days_since_last_high\", \"outputs\": {\"days_since_highest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_highest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'macd', '611d5f9748081b37f6fe0ce153b4703ea1e706faa44f005db4a60c35b5a56841', '{\"data\": {\"macd\": [0.0, -0.006621082621080632, -0.031676106525111436, -0.08421008700234012, -0.10446650946168035, -0.09250254974222827, -0.0953968542 ... (389126 characters truncated) ... pe\": \"line\", \"name\": \"Signal Line\", \"order\": 2}, \"histogram\": {\"type\": \"bar\", \"name\": \"MACD Histogram\", \"order\": 0, \"use_color_from\": \"histogram\"}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'volume', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"volume\": [32357.0, 19917.0, 35917.0, 42753.0, 26393.0, 22770.0, 16742.0, 17243.0, 19077.0, 33448.0, 10274.0, 14178.0, 40787.0, 29904.0, 33 ... (55545 characters truncated) ... roup\": \"volume_analysis\", \"chart_name\": \"Volume Analysis\", \"outputs\": {\"volume\": {\"color\": \"#FFA07A\", \"type\": \"bar\", \"name\": \"Volume\", \"order\": 1}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'relative_return', '5eb82dfaddccc4fa1c21ac16f09f2db501ded2f0e3fdfe5862879c3393b2571a', '{\"data\": {\"relative_return_5_20\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.076110451487 ... (134139 characters truncated) ... \"Relative Return Analysis\", \"outputs\": {\"relative_return_5_20\": {\"color\": \"#4169E1\", \"type\": \"line\", \"name\": \"Relative Return (5,20)\", \"order\": 1}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'ma', '00bd8c50107d25d121661de490eb38224902e4522d8762c95a159950ec36a966', '{\"data\": {\"ma5\": [-33.1802, -33.1802, -33.1802, -33.1802, -33.1802, -33.2134, -33.2634, -33.263400000000004, -33.28, -33.33, -33.4134, -33.5134000000 ... (231844 characters truncated) ... \"ma10\": {\"color\": \"#06a7a0\", \"type\": \"line\", \"name\": \"MA10\", \"order\": 2}, \"ma20\": {\"color\": \"#3c763d\", \"type\": \"line\", \"name\": \"MA20\", \"order\": 3}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'), ('00002', 'rsi', '2aef37bb7414c1f2befc26acfed0618fb29d06db6d0b4e37d099fb278abaa557', '{\"data\": {\"rsi\": [0.0, 0.0, 0.0, 0.0, 25.000000000000014, 43.778110944527874, 41.18476727785617, 50.0, 46.682653876898556, 38.4686346863469, 27.26281 ... (111366 characters truncated) ... 333172]}, \"config\": {\"chart_group\": \"rsi\", \"chart_name\": \"rsi\", \"outputs\": {\"rsi\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"rsi\", \"order\": 1}}}}', '2025-02-18 02:57:23.365734', '2025-02-18 02:57:23.365734'))]\n(Background on this error at: https://sqlalche.me/e/14/gkpj)\n2025-02-18 10:57:24,279 - ERROR - Error in batch saving results: (sqlite3.IntegrityError) UNIQUE constraint failed: strategy_results.ts_code, strategy_results.strategy_name, strategy_results.params_hash\n[SQL: INSERT INTO strategy_results (ts_code, strategy_name, params_hash, result_data, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)]\n[parameters: (('00003', 'highest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"highest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  ... (18489 characters truncated) ... hart_name\": \"highest_volume_today\", \"outputs\": {\"highest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"highest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'days_since_last_high', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_highest_vol\": [0, 0, 0, 0, 0, 0, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 4, 5, 6, 0, 0, 1, 2, 3, 4, 5, 6, 2, 0, 0, 1, 2, 3, 4, 5, 6, 6, 6 ... (18504 characters truncated) ... : \"days_since_last_high\", \"outputs\": {\"days_since_highest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_highest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'days_since_last_low', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_lowest_vol\": [0, 0, 0, 0, 0, 0, 5, 6, 2, 3, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 6, 2, 3, 4, 5, 6, 4, 5, 6, 0, 1, 0, 0, 0, ... (18499 characters truncated) ... me\": \"days_since_last_low\", \"outputs\": {\"days_since_lowest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_lowest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'lowest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"lowest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ... (18484 characters truncated) ...  \"chart_name\": \"lowest_volume_today\", \"outputs\": {\"lowest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"lowest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'relative_return', '5eb82dfaddccc4fa1c21ac16f09f2db501ded2f0e3fdfe5862879c3393b2571a', '{\"data\": {\"relative_return_5_20\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028102305020 ... (133486 characters truncated) ... \"Relative Return Analysis\", \"outputs\": {\"relative_return_5_20\": {\"color\": \"#4169E1\", \"type\": \"line\", \"name\": \"Relative Return (5,20)\", \"order\": 1}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'macd', '611d5f9748081b37f6fe0ce153b4703ea1e706faa44f005db4a60c35b5a56841', '{\"data\": {\"macd\": [0.0, -0.0011965811965812811, -0.005710180923856001, -0.009739808278002027, -0.00807937605372322, -0.004293232561154436, -0.0047879 ... (404328 characters truncated) ... pe\": \"line\", \"name\": \"Signal Line\", \"order\": 2}, \"histogram\": {\"type\": \"bar\", \"name\": \"MACD Histogram\", \"order\": 0, \"use_color_from\": \"histogram\"}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'ma', '00bd8c50107d25d121661de490eb38224902e4522d8762c95a159950ec36a966', '{\"data\": {\"ma5\": [-3.197, -3.197, -3.197, -3.197, -3.197, -3.1925999999999997, -3.194, -3.1924, -3.188, -3.1864, -3.1952000000000003, -3.195200000000 ... (232893 characters truncated) ... \"ma10\": {\"color\": \"#06a7a0\", \"type\": \"line\", \"name\": \"MA10\", \"order\": 2}, \"ma20\": {\"color\": \"#3c763d\", \"type\": \"line\", \"name\": \"MA20\", \"order\": 3}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'rsi', '2aef37bb7414c1f2befc26acfed0618fb29d06db6d0b4e37d099fb278abaa557', '{\"data\": {\"rsi\": [0.0, 0.0, 0.0, 0.0, 46.82539682539683, 57.05128205128198, 48.10810810810808, 52.35294117647059, 56.47058823529408, 52.5641025641025 ... (109641 characters truncated) ... , 50.0]}, \"config\": {\"chart_group\": \"rsi\", \"chart_name\": \"rsi\", \"outputs\": {\"rsi\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"rsi\", \"order\": 1}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'), ('00003', 'volume', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"volume\": [43438.0, 34541.0, 132812.0, 156559.0, 155718.0, 111254.0, 78305.0, 135236.0, 81646.0, 159081.0, 63544.0, 73223.0, 134635.0, 8203 ... (58378 characters truncated) ... roup\": \"volume_analysis\", \"chart_name\": \"Volume Analysis\", \"outputs\": {\"volume\": {\"color\": \"#FFA07A\", \"type\": \"bar\", \"name\": \"Volume\", \"order\": 1}}}}', '2025-02-18 02:57:24.247794', '2025-02-18 02:57:24.247794'))]\n(Background on this error at: https://sqlalche.me/e/14/gkpj)\n2025-02-18 10:57:26,046 - ERROR - Error in batch saving results: (sqlite3.IntegrityError) UNIQUE constraint failed: strategy_results.ts_code, strategy_results.strategy_name, strategy_results.params_hash\n[SQL: INSERT INTO strategy_results (ts_code, strategy_name, params_hash, result_data, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)]\n[parameters: (('00005', 'lowest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"lowest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ... (18487 characters truncated) ...  \"chart_name\": \"lowest_volume_today\", \"outputs\": {\"lowest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"lowest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'highest_volume_today', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"highest_vol_today\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  ... (18492 characters truncated) ... hart_name\": \"highest_volume_today\", \"outputs\": {\"highest_vol_today\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"highest_vol_today\", \"order\": 1}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'days_since_last_high', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_highest_vol\": [0, 0, 0, 0, 0, 0, 4, 5, 6, 6, 6, 5, 0, 1, 0, 1, 2, 3, 4, 5, 6, 5, 6, 4, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 6, 6, 2 ... (18507 characters truncated) ... : \"days_since_last_high\", \"outputs\": {\"days_since_highest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_highest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'days_since_last_low', '4a23ede7ae1d5067ac3b3d7e969642e41c6346792ef044e6c7281a514d5502a3', '{\"data\": {\"days_since_lowest_vol\": [0, 0, 0, 0, 0, 0, 6, 2, 0, 1, 0, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 4, 5, 6, 2, 3, 4, 5, 6, 0, 1, 2, 0, 0, ... (18502 characters truncated) ... me\": \"days_since_last_low\", \"outputs\": {\"days_since_lowest_vol\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"days_since_lowest_vol\", \"order\": 1}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'macd', '611d5f9748081b37f6fe0ce153b4703ea1e706faa44f005db4a60c35b5a56841', '{\"data\": {\"macd\": [0.0, -0.14079772079772068, -0.531020462496246, -0.9996562804937088, -1.18647173584222, -1.361595277943279, -1.581802095510282, -1. ... (383641 characters truncated) ... pe\": \"line\", \"name\": \"Signal Line\", \"order\": 2}, \"histogram\": {\"type\": \"bar\", \"name\": \"MACD Histogram\", \"order\": 0, \"use_color_from\": \"histogram\"}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'relative_return', '5eb82dfaddccc4fa1c21ac16f09f2db501ded2f0e3fdfe5862879c3393b2571a', '{\"data\": {\"relative_return_5_20\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.68348306841 ... (132184 characters truncated) ... \"Relative Return Analysis\", \"outputs\": {\"relative_return_5_20\": {\"color\": \"#4169E1\", \"type\": \"line\", \"name\": \"Relative Return (5,20)\", \"order\": 1}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'rsi', '2aef37bb7414c1f2befc26acfed0618fb29d06db6d0b4e37d099fb278abaa557', '{\"data\": {\"rsi\": [0.0, 0.0, 0.0, 0.0, 22.22455403987408, 21.053677932405563, 22.224554039874093, 29.270315091210605, 45.165417656735514, 10.000000000 ... (113461 characters truncated) ... 020181]}, \"config\": {\"chart_group\": \"rsi\", \"chart_name\": \"rsi\", \"outputs\": {\"rsi\": {\"type\": \"line\", \"color\": \"#FFA500\", \"name\": \"rsi\", \"order\": 1}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'volume', 'dce3ec855eb77eda655dae97c9c98cc4654f42d648621768b81d5150ad5182a5', '{\"data\": {\"volume\": [39081.0, 68953.0, 146571.0, 106320.0, 83682.0, 62011.0, 83662.0, 73697.0, 52818.0, 59303.0, 46288.0, 31579.0, 139085.0, 107900.0 ... (60413 characters truncated) ... roup\": \"volume_analysis\", \"chart_name\": \"Volume Analysis\", \"outputs\": {\"volume\": {\"color\": \"#FFA07A\", \"type\": \"bar\", \"name\": \"Volume\", \"order\": 1}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'), ('00005', 'ma', '00bd8c50107d25d121661de490eb38224902e4522d8762c95a159950ec36a966', '{\"data\": {\"ma5\": [-2.506, -2.506, -2.506, -2.506, -2.506, -3.6708, -4.7296, -5.329600000000001, -5.4354, -6.0002, -6.4590000000000005, -6.74140000000 ... (238202 characters truncated) ... \"ma10\": {\"color\": \"#06a7a0\", \"type\": \"line\", \"name\": \"MA10\", \"order\": 2}, \"ma20\": {\"color\": \"#3c763d\", \"type\": \"line\", \"name\": \"MA20\", \"order\": 3}}}}', '2025-02-18 02:57:26.015890', '2025-02-18 02:57:26.015890'))]\n(Background on this error at: https://sqlalche.me/e/14/gkpj)\n",
    "flask_app/strategy_monitor.py": "import os\nimport pandas as pd\nfrom strategies.StrategyManager import StrategyManager\nfrom models import db, StrategyResult\nfrom data_loader.data_processor import get_params_hash, save_strategy_result\nimport hashlib\nimport json\nfrom datetime import datetime\nfrom flask import Flask\nfrom config import Config\nimport time\nimport logging\nfrom tqdm import tqdm\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport numpy as np\n\n# Set up logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('strategy_monitor.log'),\n        logging.StreamHandler()\n    ]\n)\nlogger = logging.getLogger(__name__)\n\ndef optimize_dataframe(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Optimize DataFrame memory usage and convert data types efficiently.\"\"\"\n    df = df.copy()\n    \n    # Convert numerical columns to appropriate dtypes\n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    for col in numerical_columns:\n        df[col] = pd.to_numeric(df[col], errors='coerce', downcast='float')\n    \n    # Convert date to datetime if it's not already\n    if 'date' in df.columns:\n        if pd.api.types.is_string_dtype(df['date']):\n            # Convert string date in format 'YYYYMMDD' to datetime\n            df['date'] = pd.to_datetime(df['date'], format='%Y%m%d')\n        elif not pd.api.types.is_datetime64_any_dtype(df['date']):\n            df['date'] = pd.to_datetime(df['date'])\n    \n    return df\n\ndef batch_save_strategy_results(results: list):\n    \"\"\"Batch save strategy results to improve database performance.\"\"\"\n    try:\n        db.session.bulk_save_objects(results)\n        db.session.commit()\n    except Exception as e:\n        logger.error(f\"Error in batch saving results: {str(e)}\")\n        db.session.rollback()\n\ndef process_self_based_strategies_batch(stock_data: dict, strategies: list):\n    \"\"\"Process multiple self-based strategies for a stock in parallel.\"\"\"\n    results = []\n    \n    def process_single_strategy(strategy, df):\n        try:\n            default_params = strategy.get_input_parameters()\n            params_hash = get_params_hash(default_params)\n            result = process_stock_data(df, strategy, default_params)\n            if result:\n                return (strategy.name(), params_hash, result)\n        except Exception as e:\n            logger.error(f\"Error processing strategy {strategy.name()}: {str(e)}\")\n        return None\n    \n    with ThreadPoolExecutor(max_workers=min(len(strategies), 4)) as executor:\n        futures = [\n            executor.submit(process_single_strategy, strategy, stock_data['df'])\n            for strategy in strategies\n        ]\n        \n        for future in as_completed(futures):\n            result = future.result()\n            if result:\n                strategy_name, params_hash, data = result\n                results.append({\n                    'ts_code': stock_data['ts_code'],\n                    'strategy_name': strategy_name,\n                    'params_hash': params_hash,\n                    'result_data': data\n                })\n    \n    return results\n\ndef process_cross_based_strategies_batch(df: pd.DataFrame, strategies: list):\n    \"\"\"Process all cross-based strategies in one pass.\"\"\"\n    results = {}\n    \n    for strategy in strategies:\n        try:\n            default_params = strategy.get_input_parameters()\n            params_hash = get_params_hash(default_params)\n            df_result = process_cross_based_strategy(df, strategy, default_params)\n            \n            if df_result is not None:\n                results[strategy.name()] = {\n                    'result': df_result,\n                    'params_hash': params_hash,\n                    'strategy': strategy\n                }\n        except Exception as e:\n            logger.error(f\"Error processing cross-based strategy {strategy.name()}: {str(e)}\")\n    \n    return results\n\ndef process_new_strategies():\n    \"\"\"Optimized version of strategy processing.\"\"\"\n    try:\n        print(\"Starting optimized strategy processing...\")\n        app = Flask(__name__)\n        app.config.from_object(Config)\n        db.init_app(app)\n\n        with app.app_context():\n            # Load and optimize data\n            parquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data', 'merged_data.parquet'))\n            df = pd.read_parquet(parquet_file_path)\n            df = optimize_dataframe(df)\n            \n            # Get missing combinations\n            missing_combinations = get_missing_strategy_combinations(df)\n            if not missing_combinations:\n                print(\"No missing strategy combinations found.\")\n                return\n\n            manager = StrategyManager()\n            total_combinations = sum(len(strategies) for strategies in missing_combinations.values())\n            print(f\"Processing {total_combinations} total combinations...\")\n\n            # Separate self-based and cross-based strategies\n            all_strategies = {name: manager.get_strategy(name) for name in manager.available_strategies()}\n            self_based_strategies = [s for s in all_strategies.values() if s and s.is_self_based()]\n            cross_based_strategies = [s for s in all_strategies.values() if s and not s.is_self_based()]\n\n            # Process cross-based strategies first (one pass for all stocks)\n            if cross_based_strategies:\n                print(\"Processing cross-based strategies...\")\n                cross_results = process_cross_based_strategies_batch(df, cross_based_strategies)\n                \n                # Save cross-based results for each stock\n                for ts_code in tqdm(missing_combinations.keys(), desc=\"Saving cross-based results\"):\n                    stock_data = df[df['ts_code'] == ts_code]\n                    if len(stock_data) < 2:\n                        continue\n                        \n                    batch_results = []\n                    for strategy_name, result_data in cross_results.items():\n                        if strategy_name in missing_combinations[ts_code]:\n                            result = create_strategy_result_entry(\n                                result_data['result'], \n                                result_data['strategy'],\n                                ts_code,\n                                stock_data\n                            )\n                            if result:\n                                batch_results.append(StrategyResult(\n                                    ts_code=ts_code,\n                                    strategy_name=strategy_name,\n                                    params_hash=result_data['params_hash'],\n                                    result_data=result\n                                ))\n                    \n                    if batch_results:\n                        batch_save_strategy_results(batch_results)\n\n            # Process self-based strategies\n            print(\"Processing self-based strategies...\")\n            first_stock = True\n            with tqdm(total=len(missing_combinations), desc=\"Processing stocks\") as pbar:\n                for ts_code, missing_strategies in missing_combinations.items():\n                    if first_stock:\n                        print(f\"\\nFirst stock to process: {ts_code}\")\n                        input(\"Press Enter to process the first stock...\")\n                        first_stock = False\n                    \n                    stock_df = df[df['ts_code'] == ts_code].copy()\n                    if len(stock_df) < 2:\n                        pbar.update(1)\n                        continue\n\n                    # Filter for self-based strategies only\n                    self_strategies_to_process = [\n                        s for s in self_based_strategies \n                        if s.name() in missing_strategies\n                    ]\n                    \n                    if self_strategies_to_process:\n                        results = process_self_based_strategies_batch(\n                            {'ts_code': ts_code, 'df': stock_df},\n                            self_strategies_to_process\n                        )\n                        \n                        if results:\n                            batch_results = [\n                                StrategyResult(\n                                    ts_code=r['ts_code'],\n                                    strategy_name=r['strategy_name'],\n                                    params_hash=r['params_hash'],\n                                    result_data=r['result_data']\n                                )\n                                for r in results\n                            ]\n                            batch_save_strategy_results(batch_results)\n                    \n                    pbar.update(1)\n\n            print(\"Completed processing all strategies.\")\n\n    except Exception as e:\n        print(f\"Error in process_new_strategies: {str(e)}\")\n        logger.error(f\"Error in process_new_strategies: {str(e)}\")\n\ndef get_all_processed_strategies():\n    \"\"\"Get all unique strategy names that have been processed.\"\"\"\n    return {result[0] for result in StrategyResult.query.with_entities(StrategyResult.strategy_name).distinct()}\n\ndef get_missing_strategy_combinations(df: pd.DataFrame = None):\n    \"\"\"\n    Check which combinations of ts_code and strategy are missing.\n    Returns a dictionary mapping ts_codes to their missing strategies.\n    \"\"\"\n    # Get all processed combinations\n    processed_combinations = {\n        (result.ts_code, result.strategy_name) \n        for result in StrategyResult.query.with_entities(\n            StrategyResult.ts_code, \n            StrategyResult.strategy_name\n        ).distinct()\n    }\n    \n    # Get all available strategies\n    manager = StrategyManager()\n    available_strategies = manager.available_strategies()\n    \n    # If df is not provided, load it\n    # if df is None:\n    #     parquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data', 'merged_data.parquet'))\n    #     df = pd.read_parquet(parquet_file_path)\n    \n    # Get all unique ts_codes from the parquet file\n    all_ts_codes = df['ts_code'].unique()\n    \n    # Find missing combinations\n    missing_combinations = {}\n    for ts_code in all_ts_codes:\n        missing_strategies = set()\n        for strategy_name in available_strategies:\n            if (ts_code, strategy_name) not in processed_combinations:\n                missing_strategies.add(strategy_name)\n        if missing_strategies:\n            missing_combinations[ts_code] = missing_strategies\n            \n    return missing_combinations\n\ndef process_stock_data(df: pd.DataFrame, strategy, default_params: dict) -> dict:\n    \"\"\"Process a single stock's data with a strategy.\"\"\"\n    df = df.copy()\n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    df = df[numerical_columns].copy()\n    df = df.astype(float)\n\n    try:\n        # Calculate strategy results\n        df_result = strategy.calculate(df, **default_params)\n        strategy_config = strategy.get_config()\n\n        # Create the result entry\n        result_entry = {\n            'data': {},\n            'config': {\n                'chart_group': strategy_config.get('chart_group', strategy.name()),\n                'chart_name': strategy_config.get('chart_name', strategy.name()),\n                'outputs': {}\n            }\n        }\n\n        # Process each output\n        for output_name in df_result.columns:\n            output_config = strategy_config.get('outputs', {}).get(output_name, {\n                'type': 'line',\n                'color': '#FFA500',\n                'name': output_name,\n                'order': 1\n            })\n            \n            result_entry['data'][output_name] = df_result[output_name].tolist()\n            result_entry['config']['outputs'][output_name] = output_config\n\n        return result_entry\n\n    except Exception as e:\n        logger.error(f\"Error processing strategy {strategy.name()}: {str(e)}\")\n        return None\n\ndef process_self_based_strategy(df: pd.DataFrame, strategy, default_params: dict, ts_code: str):\n    \"\"\"Process a self-based strategy for a single stock.\"\"\"\n    stock_df = df[df['ts_code'] == ts_code].copy()\n    return process_stock_data(stock_df, strategy, default_params)\n\ndef process_cross_based_strategy(df: pd.DataFrame, strategy, default_params: dict) -> pd.DataFrame:\n    \"\"\"\n    Process a cross-based strategy for all stocks at once.\n    Returns the complete DataFrame with strategy results.\n    \"\"\"\n    try:\n        # Ensure numerical columns are float\n        numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n        df_processed = df.copy()\n        \n        # Ensure date column is properly formatted\n        if 'date' in df_processed.columns:\n            if pd.api.types.is_string_dtype(df_processed['date']):\n                # Convert string date in format 'YYYYMMDD' to datetime\n                df_processed['date'] = pd.to_datetime(df_processed['date'], format='%Y%m%d')\n            elif not pd.api.types.is_datetime64_any_dtype(df_processed['date']):\n                df_processed['date'] = pd.to_datetime(df_processed['date'])\n        \n        # Convert numerical columns\n        for col in numerical_columns:\n            df_processed[col] = pd.to_numeric(df_processed[col], errors='coerce')\n        \n        # Set index to maintain alignment but keep date column\n        if 'date' in df_processed.columns:\n            df_processed = df_processed.set_index(['ts_code', 'date'])\n        \n        # Calculate strategy results for all stocks at once\n        df_result = strategy.calculate(df_processed, **default_params)\n        return df_result\n    except Exception as e:\n        logger.error(f\"Error processing cross-based strategy {strategy.name()}: {str(e)}\")\n        return None\n\ndef create_strategy_result_entry(df_result: pd.DataFrame, strategy, ts_code: str, df: pd.DataFrame) -> dict:\n    \"\"\"\n    Create a result entry dictionary for storing in the database.\n    For cross-based strategies, filters the results for the specific ts_code.\n    \"\"\"\n    strategy_config = strategy.get_config()\n    result_entry = {\n        'data': {},\n        'config': {\n            'chart_group': strategy_config.get('chart_group', strategy.name()),\n            'chart_name': strategy_config.get('chart_name', strategy.name()),\n            'outputs': {}\n        }\n    }\n\n    # Get the data for this specific stock\n    stock_data = df[df['ts_code'] == ts_code]\n\n    # Process each output column\n    for output_name in df_result.columns:\n        output_config = strategy_config.get('outputs', {}).get(output_name, {\n            'type': 'line',\n            'color': '#FFA500',\n            'name': output_name,\n            'order': 1\n        })\n        \n        # Get the data for this stock's dates\n        stock_result = df_result.loc[stock_data.index]\n        result_entry['data'][output_name] = stock_result[output_name].tolist()\n        result_entry['config']['outputs'][output_name] = output_config\n\n    return result_entry\n\n# def process_new_strategies():\n#     \"\"\"\n#     Monitor for new strategies and process them for all stocks.\n#     Also checks for missing strategy-stock combinations.\n#     \"\"\"\n#     try:\n#         print(\"Checkpoint 1: Starting process_new_strategies\")\n#         app = Flask(__name__)\n#         app.config.from_object(Config)\n#         db.init_app(app)\n\n#         with app.app_context():\n#             print(\"Checkpoint 2: Flask app context initialized\")\n            \n#             # Load the parquet data first\n#             parquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data', 'merged_data.parquet'))\n#             print(f\"Checkpoint 3: Loading data from {parquet_file_path}\")\n#             df = pd.read_parquet(parquet_file_path)\n#             print(f\"Checkpoint 4: Loaded data with shape {df.shape}\")\n            \n#             # Validate data structure\n#             required_columns = ['ts_code', 'date', 'open', 'high', 'low', 'close', 'vol', 'amount']\n#             missing_cols = [col for col in required_columns if col not in df.columns]\n#             if missing_cols:\n#                 raise ValueError(f\"Missing required columns: {missing_cols}\")\n            \n#             # Remove any rows where ts_code is invalid\n#             df = df[df['ts_code'].str.match(r'^[0-9A-Za-z]+$', na=False)]\n            \n#             # Convert numerical columns to appropriate types\n#             numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n#             for col in numerical_columns:\n#                 df[col] = pd.to_numeric(df[col], errors='coerce')\n            \n#             # Drop rows with NaN values in critical columns\n#             df = df.dropna(subset=['ts_code', 'date'] + numerical_columns)\n            \n#             print(f\"Checkpoint 4b: Data shape after cleaning: {df.shape}\")\n#             print(\"Sample of cleaned data:\")\n#             print(df.head())\n            \n#             # Get missing combinations using the loaded DataFrame\n#             missing_combinations = get_missing_strategy_combinations(df)\n#             print(f\"Checkpoint 5: Found {len(missing_combinations)} stocks with missing strategies\")\n            \n#             if not missing_combinations:\n#                 print(\"No missing strategy combinations found. Exiting...\")\n#                 return\n\n#             manager = StrategyManager()\n#             total_combinations = sum(len(strategies) for strategies in missing_combinations.values())\n#             print(f\"Total missing combinations to process: {total_combinations}\")\n\n#             with tqdm(total=total_combinations, desc=\"Processing all combinations\") as main_pbar:\n#                 first_stock = True\n#                 for ts_code, missing_strategies in missing_combinations.items():\n#                     if first_stock:\n#                         print(f\"\\nFirst stock to process: {ts_code}\")\n#                         print(f\"Number of strategies to process: {len(missing_strategies)}\")\n#                         input(\"Press Enter to process the first stock...\")\n#                         first_stock = False\n                    \n#                     stock_df = df[df['ts_code'] == ts_code].copy()\n                    \n#                     if len(stock_df) < 2:  # Require at least 2 data points\n#                         print(f\"Insufficient data for stock {ts_code}, skipping...\")\n#                         main_pbar.update(len(missing_strategies))\n#                         continue\n\n#                     for strategy_name in missing_strategies:\n#                         strategy = manager.get_strategy(strategy_name)\n#                         if not strategy:\n#                             print(f\"Strategy {strategy_name} not found, skipping...\")\n#                             main_pbar.update(1)\n#                             continue\n\n#                         try:\n#                             default_params = strategy.get_input_parameters()\n#                             params_hash = get_params_hash(default_params)\n\n#                             if strategy.is_self_based():\n#                                 result = process_stock_data(stock_df, strategy, default_params)\n#                                 if result:\n#                                     save_strategy_result(ts_code, strategy_name, params_hash, result)\n#                             else:\n#                                 # For cross-based strategy, we need all stocks' data\n#                                 df_result = process_cross_based_strategy(df, strategy, default_params)\n#                                 if df_result is not None:\n#                                     result = create_strategy_result_entry(df_result, strategy, ts_code, df)\n#                                     if result:\n#                                         save_strategy_result(ts_code, strategy_name, params_hash, result)\n#                         except Exception as e:\n#                             print(f\"Error processing strategy {strategy_name} for stock {ts_code}: {str(e)}\")\n#                             logger.error(f\"Error processing strategy {strategy_name} for stock {ts_code}: {str(e)}\")\n                        \n#                         main_pbar.update(1)\n\n#             print(\"\\nCheckpoint 6: Completed processing all missing combinations\")\n\n#     except Exception as e:\n#         print(f\"Error in process_new_strategies: {str(e)}\")\n#         logger.error(f\"Error in process_new_strategies: {str(e)}\")\n\ndef clear_all_strategy_data():\n    \"\"\"Clear all strategy results from the database.\"\"\"\n    try:\n        print(\"Clearing all strategy data from database...\")\n        app = Flask(__name__)\n        app.config.from_object(Config)\n        db.init_app(app)\n\n        with app.app_context():\n            # Delete all records from StrategyResult table\n            count = StrategyResult.query.delete()\n            db.session.commit()\n            print(f\"Successfully deleted {count} strategy results from database.\")\n            return count\n    except Exception as e:\n        print(f\"Error clearing strategy data: {str(e)}\")\n        logger.error(f\"Error clearing strategy data: {str(e)}\")\n        return 0\n\ndef run_monitor(interval_minutes=60, clear_existing=False):\n    \"\"\"\n    Run the strategy monitor continuously with a specified interval.\n    \n    :param interval_minutes: Minutes to wait between checks\n    :param clear_existing: Whether to clear existing strategy data before starting\n    \"\"\"\n    print(f\"Starting strategy monitor with {interval_minutes} minute interval...\")\n    logger.info(\"Starting strategy monitor...\")\n    \n    if clear_existing:\n        deleted_count = clear_all_strategy_data()\n        print(f\"Cleared {deleted_count} existing strategy results.\")\n    \n    while True:\n        print(\"\\n\" + \"=\"*50)\n        print(f\"Starting new monitoring cycle at {datetime.now()}\")\n        print(\"=\"*50)\n        process_new_strategies()\n        print(f\"\\nSleeping for {interval_minutes} minutes...\")\n        logger.info(f\"Sleeping for {interval_minutes} minutes...\")\n        time.sleep(interval_minutes * 60)\n\nif __name__ == \"__main__\":\n    run_monitor(clear_existing=True) ",
    "flask_app/data_loader/data_loader.py": "import os\nimport pandas as pd\n\ndef load_parquet(file_path):\n    \"\"\"\n    Load a Parquet file into a Pandas DataFrame.\n    :param file_path: Path to the Parquet file.\n    :return: Pandas DataFrame\n    \"\"\"\n    try:\n        df = pd.read_parquet(file_path)\n        print(f\"Loaded Parquet file from {file_path}\")\n        return df\n    except Exception as e:\n        print(f\"Failed to load Parquet file: {e}\")\n        return None",
    "flask_app/data_loader/data_processor.py": "from strategies.StrategyManager import StrategyManager\nimport pandas as pd\nfrom models import db, StrategyResult\nimport hashlib\nimport json\nfrom datetime import datetime, timedelta\n\ndef get_params_hash(params: dict) -> str:\n    \"\"\"Create a hash of strategy parameters for caching.\"\"\"\n    # Sort the params to ensure consistent hashing\n    sorted_params = json.dumps(params, sort_keys=True)\n    return hashlib.sha256(sorted_params.encode()).hexdigest()\n\ndef get_cached_result(ts_code: str, strategy_name: str, params_hash: str) -> dict:\n    \"\"\"Get cached strategy result if available and not too old.\"\"\"\n    cached = StrategyResult.query.filter_by(\n        ts_code=ts_code,\n        strategy_name=strategy_name,\n        params_hash=params_hash\n    ).first()\n    \n    if cached:\n        # Check if result is less than 24 hours old\n        if datetime.utcnow() - cached.updated_at < timedelta(hours=24):\n            return cached.result_data\n        # Delete old cache\n        db.session.delete(cached)\n        db.session.commit()\n    return None\n\ndef save_strategy_result(ts_code: str, strategy_name: str, params_hash: str, result_data: dict):\n    \"\"\"Save or update strategy result in the database.\"\"\"\n    try:\n        # Try to find existing record\n        cached = StrategyResult.query.filter_by(\n            ts_code=ts_code,\n            strategy_name=strategy_name,\n            params_hash=params_hash\n        ).first()\n\n        if cached:\n            cached.result_data = result_data\n            cached.updated_at = datetime.utcnow()\n        else:\n            new_result = StrategyResult(\n                ts_code=ts_code,\n                strategy_name=strategy_name,\n                params_hash=params_hash,\n                result_data=result_data\n            )\n            db.session.add(new_result)\n        \n        db.session.commit()\n    except Exception as e:\n        db.session.rollback()\n        print(f\"Error saving strategy result: {e}\")\n\ndef process_main_stock_data(df: pd.DataFrame) -> dict:\n    \"\"\"Process main stock data for visualization.\"\"\"\n    df = df.copy()  # Explicitly create a copy\n    x_data = df['date'].tolist()\n    df[['open', 'close', 'low', 'high']] = df[['open', 'close', 'low', 'high']].astype(float)\n    candle_data = df[['open', 'close', 'low', 'high']].values.tolist()\n    close_prices = df['close'].astype(float).tolist()\n    \n    return {\n        'x_data': x_data,\n        'candle_data': candle_data,\n        'close_prices': close_prices\n    }\n\ndef process_strategy_data(df: pd.DataFrame, strategy_configs: list) -> dict:\n    \"\"\"\n    Process stock data using the provided strategy configurations.\n    Attempts to use cached results when available.\n    \n    :param df: DataFrame containing stock data.\n    :param strategy_configs: List of strategy configurations.\n    :return: Dictionary with strategy names and calculated results.\n    \"\"\"\n    results = {}\n    manager = StrategyManager()\n    ts_code = df['ts_code'].iloc[0]  # Get the stock code\n\n    df = df.copy()\n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    df = df[numerical_columns].copy()\n    df = df.astype(float)\n\n    for config in strategy_configs:\n        strategy = manager.get_strategy(config[\"name\"])\n        if not strategy:\n            results[config[\"name\"]] = {\"error\": f\"Strategy {config['name']} not found.\"}\n            continue\n\n        try:\n            # Get strategy configuration\n            strategy_config = strategy.get_config()\n            \n            # Get and adjust input parameters\n            input_params = strategy.get_input_parameters()\n            adjusted_params = {param: config[\"params\"].get(param, default) \n                             for param, default in input_params.items()}\n            \n            # print(f\"Adjusted parameters: {adjusted_params}\")\n            # Generate hash for these parameters\n            params_hash = get_params_hash(adjusted_params)\n            \n            # # Try to get cached result\n            # cached_result = get_cached_result(ts_code, strategy.name(), params_hash)\n            # if cached_result:\n            #     results[strategy.name()] = cached_result\n            #     continue\n\n            # Calculate new results if no cache available\n            df_result = strategy.calculate(df, **adjusted_params).bfill().ffill()\n\n            # Create the result entry\n            result_entry = {\n                'data': {},\n                'config': {\n                    'chart_group': strategy_config.get('chart_group', strategy.name()),\n                    'chart_name': strategy_config.get('chart_name', strategy.name()),\n                    'outputs': {}\n                }\n            }\n\n            # Process each output\n            for output_name in df_result.columns:\n                output_config = strategy_config.get('outputs', {}).get(output_name, {\n                    'type': 'line',\n                    'color': '#FFA500',\n                    'name': output_name,\n                    'order': 1\n                })\n                \n                result_entry['data'][output_name] = df_result[output_name].tolist()\n                result_entry['config']['outputs'][output_name] = output_config\n\n            # Save result to cache\n            save_strategy_result(ts_code, strategy.name(), params_hash, result_entry)\n            \n            # Store in results\n            results[strategy.name()] = result_entry\n\n        except Exception as e:\n            results[config[\"name\"]] = {\"error\": f\"Error with strategy {config['name']}: {str(e)}\"}\n\n    return results\n",
    "flask_app/data_loader/__init__.py": "",
    "flask_app/static/css/dashboard.css": ".btn {\n    display: inline-block;\n    padding: 10px 20px;\n    margin: 10px;\n    border: none;\n    border-radius: 5px;\n    text-align: center;\n    cursor: pointer;\n    transition: opacity 0.3s ease;\n}\n\n.btn-primary {\n    background-color: #007bff;\n    color: #ffffff;\n}\n\n.btn-secondary {\n    background-color: #6c757d;\n    color: #ffffff;\n}\n\n.btn:hover {\n    opacity: 0.8;\n}",
    "flask_app/static/css/global.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n/* 容器样式 */\n.container {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    padding: 30px;\n    width: 100%;\n    max-width: none;\n    min-width: 500px;\n    text-align: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n/* 标题样式 */\nh1, h2 {\n    font-weight: bold;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    margin-bottom: 20px;\n}\n\n/* 输入框样式 */\n\n.input-group input {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: rgba(255, 255, 255, 0.2);\n    color: #ffffff;\n    font-size: 16px;\n    outline: none;\n}\n\n.input-group input:focus, .input-group select:focus {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n/* 按钮样式 */\n.btn {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: #007bff;\n    color: #ffffff;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.btn:hover {\n    background: #0056b3;\n}\n\n/* 链接样式 */\n.link {\n    font-size: 14px;\n    margin-top: 15px;\n}\n\n.link a {\n    color: #007bff;\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.link a:hover {\n    color: #0056b3;\n}\n\n/* 闪现消息样式 */\n.flash-message {\n    margin-top: 10px;\n    font-size: 14px;\n    color: red;\n}\n\n.btn-sm {\n    width: auto;\n    padding: 5px 10px;\n    margin: 5px;\n}\n\n.chart-container {\n    /* width: 100%; */\n    height: 400px;\n    margin-top: 20px;\n}\n",
    "flask_app/static/css/index.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.home-container {\n    text-align: center;\n    max-width: 600px;\n    margin: auto;\n    padding: 20px;\n    border-radius: 15px;\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.home-container h1 {\n    font-size: 36px;\n    font-weight: bold;\n    margin-bottom: 20px;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n}\n\n.login-link {\n    display: inline-block;\n    padding: 10px 20px;\n    border: 2px solid #007bff;\n    border-radius: 5px;\n    color: #ffffff;\n    text-decoration: none;\n    font-size: 18px;\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.login-link:hover {\n    background-color: #007bff;\n    color: #ffffff;\n}",
    "flask_app/static/css/login.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.login-container {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    padding: 30px;\n    width: 350px;\n    text-align: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.login-container h2 {\n    margin-bottom: 20px;\n    font-size: 24px;\n    font-weight: bold;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n}\n\n.input-group {\n    margin-bottom: 15px;\n    text-align: left;\n}\n\n.input-group label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 14px;\n    color: #ffffff;\n}\n\n.input-group input {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: rgba(255, 255, 255, 0.2);\n    color: #ffffff;\n    font-size: 16px;\n    outline: none;\n}\n\n.input-group input:focus {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n.remember-group {\n    text-align: left;\n    margin-bottom: 15px;\n}\n\n.remember-group label {\n    font-size: 14px;\n    color: #ffffff;\n}\n\n.remember-group input {\n    margin-right: 5px;\n}\n\n.login-btn {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: #007bff;\n    color: #ffffff;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.login-btn:hover {\n    background: #0056b3;\n}\n\n.register-link {\n    font-size: 14px;\n    margin-top: 15px;\n}\n\n.register-link a {\n    color: #007bff;\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.register-link a:hover {\n    color: #0056b3;\n}\n\n.flash-message {\n    margin-top: 10px;\n    font-size: 14px;\n}",
    "flask_app/static/css/register.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.register-container {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    padding: 30px;\n    width: 400px;\n    text-align: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.register-container h2 {\n    font-size: 24px;\n    font-weight: bold;\n    margin-bottom: 20px;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n}\n\n.input-group {\n    margin-bottom: 15px;\n    text-align: left;\n}\n\n.input-group label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 14px;\n    color: #ffffff;\n}\n\n.input-group input {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: rgba(255, 255, 255, 0.2);\n    color: #ffffff;\n    font-size: 16px;\n    outline: none;\n}\n\n.input-group input:focus {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n.register-btn {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: #007bff;\n    color: #ffffff;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.register-btn:hover {\n    background: #0056b3;\n}\n\n.login-link {\n    font-size: 14px;\n    margin-top: 15px;\n}\n\n.login-link a {\n    color: #007bff;\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.login-link a:hover {\n    color: #0056b3;\n}\n\n.flash-message {\n    margin-top: 10px;\n    font-size: 14px;\n}",
    "flask_app/static/css/stock.css": "/* static/css/stock.css */\n.stock-container {\n    position: relative;\n    padding: 20px;\n    width: 100%;\n    max-width: 100%; \n    min-width: 300px;\n    margin: 0 auto;\n    height: 100%;\n    box-sizing: border-box;\n    padding-top: 80px;\n    display: flex;\n    flex-direction: column;\n}\n\n.stock-container h2 {\n    margin: 0 0 20px 0;\n    padding: 0;\n}\n\n.controls-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    margin-bottom: 20px;\n    position: relative;\n    padding: 0 20px;\n}\n\n.search-container {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n}\n\n.input-group {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n#stockInput {\n    width: 120px;\n    padding: 8px;\n    border-radius: 4px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    background: rgba(255, 255, 255, 0.1);\n    color: white;\n}\n\n.subchart-controls {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    gap: 20px;\n}\n\n#subchartCount {\n    padding: 8px;\n    border-radius: 4px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    background: rgba(255, 255, 255, 0.1);\n    color: white;\n    cursor: pointer;\n}\n\n#subchartCount option {\n    background-color: #2c2c2c;\n    color: white;\n    padding: 8px;\n}\n\n#subchartCount:focus {\n    outline: none;\n    border-color: rgba(255, 255, 255, 0.4);\n    background: rgba(255, 255, 255, 0.2);\n}\n\n.subchart-selectors-container {\n    display: flex;\n    gap: 20px;\n    flex-wrap: wrap;\n}\n\n.interaction-panel {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.btn-sm {\n    padding: 8px 16px;\n    border-radius: 4px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    background: rgba(255, 255, 255, 0.1);\n    color: white;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.btn-sm:hover {\n    background: rgba(255, 255, 255, 0.2);\n}\n\n.chart-container {\n    position: relative;\n    width: 100%;\n    height: calc(100vh - 250px);\n    margin-top: 20px;\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 8px;\n    overflow: visible;\n    min-height: 300px;\n    max-height: calc(100vh - 100px);\n}\n\n#stockChart {\n    width: 100%;\n    height: calc(100% - 10px);\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 8px 8px 0 0;\n    overflow: hidden;\n}\n\n.resize-handle {\n    position: absolute;\n    bottom: -5px;\n    left: 0;\n    right: 0;\n    height: 10px;\n    background: rgba(255, 255, 255, 0.1);\n    cursor: ns-resize;\n    border-bottom-left-radius: 8px;\n    border-bottom-right-radius: 8px;\n    transition: background 0.3s ease;\n    z-index: 10;\n}\n\n.resize-handle:hover {\n    background: rgba(255, 255, 255, 0.2);\n}\n\n.resize-handle::after {\n    content: '';\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 50px;\n    height: 4px;\n    background: rgba(255, 255, 255, 0.3);\n    border-radius: 2px;\n}\n\n/* Add styles for the dragging state */\n.chart-container.resizing {\n    user-select: none;\n}\n\n.chart-container.resizing .resize-handle {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n/* Navigation styles */\n.menu-button {\n    position: fixed;\n    top: 20px;\n    left: 20px;\n    z-index: 1002;\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    color: white;\n    padding: 10px;\n    border-radius: 8px;\n    cursor: pointer;\n    backdrop-filter: blur(5px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    transition: all 0.3s ease;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.menu-button:hover {\n    background: rgba(255, 255, 255, 0.2);\n    transform: scale(1.05);\n}\n\n.menu-button i {\n    font-size: 1.5em;\n}\n\n.sidebar {\n    position: fixed;\n    left: -100%;\n    top: 0;\n    height: 100vh;\n    width: 300px;\n    background: rgba(0, 0, 0, 0.8);\n    padding: 80px 25px 25px;\n    border-right: 1px solid rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(10px);\n    transition: all 0.3s ease-in-out;\n    z-index: 1001;\n    box-shadow: 5px 0 15px rgba(0, 0, 0, 0.3);\n    transform: translateX(-300px);\n}\n\n.sidebar.active {\n    left: 0;\n    transform: translateX(0);\n}\n\n.sidebar-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(3px);\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease-in-out;\n    z-index: 1000;\n    pointer-events: none;\n}\n\n.sidebar-overlay.active {\n    opacity: 1;\n    visibility: visible;\n    pointer-events: auto;\n}\n\n.user-info {\n    margin-bottom: 20px;\n    padding: 15px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    backdrop-filter: blur(5px);\n}\n\n.user-info h2 {\n    color: #ffffff;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    font-size: 1.2em;\n    text-align: center;\n    margin: 0;\n    padding: 10px;\n    line-height: 1.4;\n    word-wrap: break-word;\n}\n\n.nav-links {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    padding: 15px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    backdrop-filter: blur(5px);\n}\n\n.nav-link {\n    padding: 15px 20px;\n    text-decoration: none;\n    color: #ffffff;\n    border-radius: 12px;\n    background: rgba(255, 255, 255, 0.15);\n    transition: all 0.3s ease;\n    text-align: center;\n    font-weight: 500;\n    font-size: 1.1em;\n    letter-spacing: 0.5px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.nav-link:hover {\n    background: rgba(255, 255, 255, 0.25);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\nhtml {\n    max-width: 100%;\n    overflow-x: hidden; /* 隐藏水平滚动条 */\n}",
    "flask_app/static/js/chart_utils.js": "let chart = null;\nlet subcharts = [];\nlet fetchedData = null;\n\n// Add cache management functions\nfunction saveToCache(tsCode, data) {\n    try {\n        // Create a deep copy of the data\n        const cacheData = JSON.parse(JSON.stringify(data));\n        \n        // // Remove color configurations from strategies before caching\n        // if (cacheData.strategies) {\n        //     Object.keys(cacheData.strategies).forEach(strategyName => {\n        //         if (cacheData.strategies[strategyName].config) {\n        //             delete cacheData.strategies[strategyName].config;\n        //         }\n        //     });\n        // }\n\n        const cache = JSON.parse(localStorage.getItem('stockDataCache') || '{}');\n        cache[tsCode] = {\n            data: cacheData,\n            timestamp: Date.now()\n        };\n        localStorage.setItem('stockDataCache', JSON.stringify(cache));\n    } catch (e) {\n        console.error('Error saving to cache:', e);\n        localStorage.clear();\n        try {\n            const cache = {};\n            cache[tsCode] = {\n                data: cacheData,\n                timestamp: Date.now()\n            };\n            localStorage.setItem('stockDataCache', JSON.stringify(cache));\n        } catch (e) {\n            console.error('Failed to save to cache even after clearing:', e);\n        }\n    }\n}\n\nfunction getFromCache(tsCode) {\n    try {\n        const cache = JSON.parse(localStorage.getItem('stockDataCache') || '{}');\n        const cachedData = cache[tsCode];\n        \n        if (!cachedData) return null;\n\n        // Check if cache is older than 24 hours\n        const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n        if (Date.now() - cachedData.timestamp > CACHE_DURATION) {\n            // Remove expired cache\n            delete cache[tsCode];\n            localStorage.setItem('stockDataCache', JSON.stringify(cache));\n            return null;\n        }\n\n        // Force a fresh fetch of strategy configurations\n        return null;  // Temporarily disable cache to force fresh data\n    } catch (e) {\n        console.error('Error reading from cache:', e);\n        return null;\n    }\n}\n\nfunction saveSettings() {\n    const settings = {\n        stockCode: $('#stockInput').val(),\n        subchartCount: $('#subchartCount').val(),\n        subchartSelections: {}\n    };\n    \n    // Save all subchart selections, even if they're not currently visible\n    $('.subchart-selector').each(function(index) {\n        const id = $(this).attr('id');\n        settings.subchartSelections[id] = $(this).val();\n    });\n    \n    // Also save any previously saved selections that aren't currently in the DOM\n    if (window.savedSubchartSelections) {\n        Object.keys(window.savedSubchartSelections).forEach(key => {\n            if (!settings.subchartSelections[key]) {\n                settings.subchartSelections[key] = window.savedSubchartSelections[key];\n            }\n        });\n    }\n    \n    localStorage.setItem('stockChartSettings', JSON.stringify(settings));\n}\n\nfunction loadSettings() {\n    const savedSettings = localStorage.getItem('stockChartSettings');\n    if (savedSettings) {\n        const settings = JSON.parse(savedSettings);\n        \n        $('#stockInput').val(settings.stockCode || '00001');\n        $('#subchartCount').val(settings.subchartCount || '0');\n        \n        // Store selections in window for persistence\n        window.savedSubchartSelections = settings.subchartSelections || {};\n    }\n}\n\n$(document).ready(function() {\n    loadSettings();\n    searchStock();\n    \n    // Add resize observer for the chart container\n    const chartContainer = document.querySelector('.chart-container');\n    const resizeObserver = new ResizeObserver(entries => {\n        if (chart) {\n            chart.resize();\n        }\n    });\n    resizeObserver.observe(chartContainer);\n\n    // Add manual resize functionality\n    const resizeHandle = document.querySelector('.resize-handle');\n    let isResizing = false;\n    let startY;\n    let startHeight;\n\n    resizeHandle.addEventListener('mousedown', function(e) {\n        isResizing = true;\n        startY = e.clientY;\n        startHeight = chartContainer.clientHeight;\n        chartContainer.classList.add('resizing');\n    });\n\n    document.addEventListener('mousemove', function(e) {\n        if (!isResizing) return;\n        \n        const delta = e.clientY - startY;\n        const newHeight = Math.max(300, Math.min(startHeight + delta, window.innerHeight - 100));\n        chartContainer.style.height = newHeight + 'px';\n        \n        if (chart) {\n            chart.resize();\n        }\n    });\n\n    document.addEventListener('mouseup', function() {\n        if (isResizing) {\n            isResizing = false;\n            chartContainer.classList.remove('resizing');\n        }\n    });\n\n    // Handle window resize\n    window.addEventListener('resize', function() {\n        if (chart) {\n            chart.resize();\n        }\n    });\n\n    $('#stockInput').on('change', saveSettings);\n    $('#subchartCount').on('change', saveSettings);\n});\n\nfunction searchStock() {\n    var tsCode = $('#stockInput').val().trim();\n    if (!tsCode) {\n        alert('Please enter a valid stock code');\n        return;\n    }\n\n    // Try to get data from cache first\n    const cachedData = getFromCache(tsCode);\n    if (cachedData) {\n        fetchedData = cachedData;\n        updateSubchartSelectors();\n        buildChart(cachedData.main, cachedData.strategies);\n        return;\n    }\n\n    // If not in cache, fetch from server\n    $.ajax({\n        url: '/stock_data',\n        method: 'GET',\n        data: { ts_code: tsCode },\n        dataType: 'json',\n        success: function(data) {\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n            // Save to cache\n            saveToCache(tsCode, data);\n            \n            fetchedData = data;\n            updateSubchartSelectors();\n            buildChart(data.main, data.strategies);\n        },\n        error: function(xhr, status, error) {\n            alert('Error retrieving stock data');\n            console.error(\"AJAX error:\", error);\n        }\n    });\n}\n\n// Helper function to create initial configuration for charts and also for updating the chart\nfunction setChartParams(subchartCount, mainData) {\n    // Fixed pixel values for positioning and grid heights\n    const chartContainer = document.getElementById('stockChart');\n    const containerWidth = chartContainer.clientWidth;\n    const leftMargin = 50;\n    const rightMargin = 50;\n    const gridWidth = containerWidth - leftMargin - rightMargin;\n    const chartHeight = 1200;  // Height of the chart container\n    const mainChartHeight = 500;  // Main chart height (candlestick)\n    const subchartHeight = 150;  // Each subchart (RSI, Volume) height\n    const startPoint = 90;\n    const endPoint = 100;\n    // Calculate the bottom position for dataZoom to be below the last grid\n    const totalHeight = mainChartHeight + (subchartCount * (subchartHeight + 5)); // Total height of all grids\n    const dataZoomBottom = totalHeight + 80; // Adding some space between the last grid and dataZoom\n\n    // Set grid configuration for all charts\n    let gridConfig = [\n        {\n            left: 50,\n            right: 50,\n            top: 50, // Slightly under the legend\n            height: mainChartHeight, // Height of the main chart\n\n        }\n    ];\n\n    let legendConfig = [\n        {\n            data: ['Candlestick', 'MA5', 'MA10', 'MA20', 'RSI', 'Volume'],\n            top: 10, // Positioning legend slightly near the top\n            left: 'center'\n        }\n    ];\n\n    let xAxisConfig = [\n        {\n            type: 'category',\n            data: mainData.x_data,\n            scale: true,\n            boundaryGap: false,\n            axisLine: { onZero: false }\n        },\n    ];\n\n    let yAxisConfig = [\n        {\n            scale: true,\n            splitArea: { show: true }\n        }\n    ];\n\n    let dataZoomConfig = [\n        {\n            type: 'slider',\n            show: true,\n            xAxisIndex: [0],\n            filterMode: 'filter',\n            height: 30,\n            top: dataZoomBottom, // Dynamically set the bottom position\n            handleSize: '80%',\n            handleStyle: { color: '#d3dee5' },\n            backgroundStyle: { color: '#f8fcff' },\n            dataBackground: { lineStyle: { color: '#5793f3' }, areaStyle: { color: '#e3f6ff' } },\n            start: startPoint,\n            end: endPoint\n        },\n        {\n            type: 'inside',\n            xAxisIndex: [0,1,2,3,4,5],\n            start: startPoint,\n            end: endPoint\n        }\n    ];\n\n    // Dynamically add subcharts based on subchartCount\n    let subchartTop = mainChartHeight + 60;  // Subchart positions (starting below the main chart)\n    for (let i = 0; i < subchartCount; i++) {\n        let gridIndex = i + 1;\n        gridConfig.push({\n            left: 50,\n            right: 50,\n            top: subchartTop + (i * (subchartHeight)) + 10, // Stack subcharts vertically\n            height: subchartHeight,\n        });\n\n        // Add new x and y axes for each subchart\n        xAxisConfig.push({\n            type: 'category',\n            gridIndex: gridIndex,\n            data: mainData.x_data,\n            boundaryGap: false,\n            axisLine: { onZero: false },\n            axisTick: { show: false },\n            splitLine: { show: false },\n            axisLabel: { show: false },\n            min: 'dataMin',\n            max: 'dataMax'\n        });\n\n        yAxisConfig.push({\n            scale: true,\n            gridIndex: gridIndex,\n            splitNumber: 2,\n            axisLabel: { show: false },\n            axisLine: { show: false },\n            axisTick: { show: false },\n            splitLine: { show: true }\n        });\n    }\n\n    \n    \n    return { gridConfig, legendConfig, xAxisConfig, yAxisConfig, dataZoomConfig};\n}\n\nfunction buildChart(mainData, strategiesData) {\n    // Initialize the main chart\n    if (chart) {\n        chart.dispose();\n    }\n\n    const chartContainer = document.getElementById('stockChart');\n    chart = echarts.init(chartContainer);\n\n    // Get chart configurations dynamically\n    const subchartCount = parseInt($('#subchartCount').val());\n\n    const { gridConfig, legendConfig, xAxisConfig, yAxisConfig, dataZoomConfig } = setChartParams(subchartCount, mainData);\n\n    // Force chart resize to fit container\n    chart.resize();\n\n    const options = {\n        animation: false,\n        title: {\n            text: 'Stock Candlestick Chart',\n            top: '0%',\n            left: 'left',\n            textStyle: {\n                color: '#ffffff'\n            }\n        },\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                snap: true,\n                crossStyle: { color: '#ffffff' },\n                label: {\n                    color: '#000000'\n                }\n            },\n            backgroundColor: 'rgba(50, 50, 50, 0.9)',\n            borderColor: '#333',\n            textStyle: {\n                color: '#ffffff'\n            },\n            formatter: function (params) {\n                let tooltip = '';\n                if (!params || params.length === 0) return tooltip;\n                tooltip += params[0].name + '<br>';\n                params.forEach(param => {\n                    if (param.seriesType === 'candlestick') {\n                        const [num, open, close, low, high] = param.value;\n                        tooltip += `Open=${open.toFixed(2)}<br>Close=${close.toFixed(2)}<br>Low=${low.toFixed(2)}<br>High=${high.toFixed(2)}<br>`;\n                    } else {\n                        tooltip += `${param.seriesName}: ${param.value.toFixed(2)}<br>`;\n                    }\n                });\n                return tooltip;\n            }\n        },\n        axisPointer: {\n            link: [\n                { xAxisIndex: 'all' }\n            ],\n            label: {\n                backgroundColor: '#777',\n                color: '#ffffff'\n            }\n        },\n        legend: {\n            ...legendConfig[0],\n            textStyle: {\n                color: '#ffffff'\n            }\n        },\n        grid: gridConfig,\n        xAxis: xAxisConfig.map(axis => ({\n            ...axis,\n            axisLabel: {\n                ...axis.axisLabel,\n                color: '#ffffff'\n            },\n            axisLine: {\n                ...axis.axisLine,\n                lineStyle: {\n                    color: '#ffffff'\n                }\n            },\n            splitLine: {\n                show: false\n            }\n        })),\n        yAxis: yAxisConfig.map(axis => ({\n            ...axis,\n            axisLabel: {\n                ...axis.axisLabel,\n                color: '#ffffff'\n            },\n            axisLine: {\n                ...axis.axisLine,\n                lineStyle: {\n                    color: '#ffffff'\n                }\n            },\n            splitLine: {\n                show: true,\n                lineStyle: {\n                    color: 'rgba(255, 255, 255, 0.1)'\n                }\n            },\n            splitArea: {\n                show: true,\n                areaStyle: {\n                    color: ['rgba(255, 255, 255, 0.02)', 'rgba(255, 255, 255, 0.01)']\n                }\n            }\n        })),\n        dataZoom: dataZoomConfig.map(zoom => ({\n            ...zoom,\n            textStyle: {\n                color: '#ffffff'\n            },\n            handleStyle: {\n                ...zoom.handleStyle,\n                color: '#ffffff'\n            },\n            borderColor: '#ffffff',\n            dataBackground: {\n                lineStyle: { color: '#ffffff' },\n                areaStyle: { color: 'rgba(255, 255, 255, 0.2)' }\n            },\n            selectedDataBackground: {\n                lineStyle: { color: '#ffffff' },\n                areaStyle: { color: 'rgba(255, 255, 255, 0.4)' }\n            }\n        })),\n        series: [{\n            name: 'Candlestick',\n            type: 'candlestick',\n            data: mainData.candle_data,\n            itemStyle: {\n                color: '#00da3c',\n                color0: '#ec0000',\n                borderColor: '#00da3c',\n                borderColor0: '#ec0000'\n            }\n        }]\n    };\n\n    // Add MA lines from strategy data if available\n    if (strategiesData.ma) {\n        const maData = strategiesData.ma.data;\n        const maConfig = strategiesData.ma.config.outputs;\n        \n        for (const [outputName, outputConfig] of Object.entries(maConfig)) {\n            options.series.push({\n                name: outputConfig.name,\n                type: 'line',\n                data: maData[outputName],\n                smooth: true,\n                lineStyle: { \n                    width: 2,\n                    color: outputConfig.color\n                },\n                itemStyle: { \n                    color: outputConfig.color\n                },\n                showSymbol: false\n            });\n        }\n    }\n\n    // Add MarkPoints\n    options.series[0].markPoint = {\n        label: {\n            formatter: (param) => Math.round(param.value) || 0,\n            color: '#000000'\n        },\n        data: [{\n            name: '最高',\n            type: 'max',\n            valueDim: 'highest',\n            symbol: 'pin',\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            }\n        }, {\n            name: '最低',\n            type: 'min',\n            valueDim: 'lowest',\n            symbol: 'pin',\n            symbolRotate: 180,\n            symbolOffset: [0, 0],\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            },\n            label: {\n                offset: [0, 10]\n            }\n        }]\n    };\n\n    // Add subchart series based on selected strategies\n    for (let i = 0; i < subchartCount; i++) {\n        const selectorId = `subchart${i + 1}`;\n        const selectedStrategy = $(`#${selectorId}`).val();\n        if (selectedStrategy && strategiesData[selectedStrategy] && selectedStrategy !== 'ma') {\n            const strategyData = strategiesData[selectedStrategy];\n            const outputs = strategyData.config.outputs;\n            \n            // Sort outputs by order if specified\n            const sortedOutputs = Object.entries(outputs).sort((a, b) => \n                (a[1].order || 0) - (b[1].order || 0)\n            );\n\n            // Add each output as a series\n            for (const [outputName, outputConfig] of sortedOutputs) {\n                const isBarChart = outputConfig.type === 'bar';\n                const isHistogram = outputConfig.use_color_from === 'histogram';\n\n                // Create series configuration\n                let seriesConfig = {\n                    name: outputConfig.name,\n                    type: outputConfig.type,\n                    data: strategyData.data[outputName],\n                    smooth: false,\n                    showSymbol: false,\n                    xAxisIndex: i + 1,\n                    yAxisIndex: i + 1\n                };\n\n                // For bar charts, add color based on data type\n                if (isBarChart) {\n                    if (isHistogram) {\n                        // For MACD histogram, color based on value\n                        seriesConfig.itemStyle = {\n                            color: function(params) {\n                                return params.value >= 0 ? '#00da3c' : '#ec0000';\n                            }\n                        };\n                    } else {\n                        // For regular bars (like volume), color based on candlestick\n                        seriesConfig.itemStyle = {\n                            color: function(params) {\n                                const candleData = mainData.candle_data[params.dataIndex];\n                                return candleData[1] > candleData[0] ? '#00da3c' : '#ec0000';\n                            }\n                        };\n                    }\n                } else {\n                    // For non-bar charts, use the strategy's configured color\n                    seriesConfig.lineStyle = { \n                        width: 3,\n                        color: outputConfig.color\n                    };\n                    seriesConfig.itemStyle = { \n                        color: outputConfig.color,\n                        opacity: 0.8\n                    };\n                }\n\n                options.series.push(seriesConfig);\n            }\n        }\n    }\n\n    // Set the final options\n    chart.setOption(options);\n}\n\nfunction resetChart() {\n    buildChart(fetchedData.main, fetchedData.strategies);\n}\n\nfunction updateSubcharts() {\n    updateSubchartSelectors();\n    resetChart();\n}\n\nfunction updateChartForSubchart(selectorId) {\n    if (fetchedData) {\n        buildChart(fetchedData.main, fetchedData.strategies);\n    }\n}\n\n// Function to update subchart selectors based on subchartCount\nfunction updateSubchartSelectors() {\n    const subchartCount = parseInt($('#subchartCount').val());\n    const selectorsContainer = $('.subchart-selectors-container');\n    selectorsContainer.empty();\n\n    // Create wrapper for selectors\n    const selectorsWrapper = $('<div>', {\n        class: 'selectors-wrapper',\n        css: {\n            display: 'flex',\n            gap: '20px',\n            alignItems: 'center'\n        }\n    });\n\n    for (let i = 0; i < subchartCount; i++) {\n        const selectorId = `subchart${i + 1}`;\n        const selectorContainer = $('<div>', {\n            css: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '10px'\n            }\n        });\n\n        const label = $('<label>', {\n            text: `Subchart ${i + 1}:`,\n            for: selectorId,\n            css: {\n                color: 'white'\n            }\n        });\n\n        const selector = $('<select>', {\n            id: selectorId,\n            class: 'subchart-selector',\n            css: {\n                padding: '8px',\n                borderRadius: '4px',\n                border: '1px solid rgba(255, 255, 255, 0.2)',\n                background: 'rgba(255, 255, 255, 0.1)',\n                color: 'white',\n                cursor: 'pointer',\n                minWidth: '200px'\n            }\n        });\n\n        selector.on('change', function() {\n            const id = $(this).attr('id');\n            if (!window.savedSubchartSelections) {\n                window.savedSubchartSelections = {};\n            }\n            window.savedSubchartSelections[id] = $(this).val();\n            updateChartForSubchart(this.id);\n            saveSettings();\n        });\n\n        selectorContainer.append(label, selector);\n        selectorsWrapper.append(selectorContainer);\n    }\n\n    selectorsContainer.append(selectorsWrapper);\n    updateSubchartSelectorsOptions();\n}\n\nfunction updateSubchartSelectorsOptions() {\n    if (!fetchedData || !fetchedData.strategies) return;\n\n    const strategies = Object.keys(fetchedData.strategies);\n    $('.subchart-selector').each(function(index) {\n        const selectorId = this.id;\n        $(this).empty();\n        \n        // Add placeholder option\n        $('<option>', {\n            value: '',\n            text: 'Select strategy',\n            css: {\n                background: '#2c2c2c',\n                color: 'white',\n                padding: '8px'\n            }\n        }).appendTo(this);\n\n        // Add strategy options\n        strategies.forEach(strategy => {\n            const strategyConfig = fetchedData.strategies[strategy].config || { name: strategy };\n            $('<option>', {\n                value: strategy,\n                text: strategyConfig.name || strategy,\n                css: {\n                    background: '#2c2c2c',\n                    color: 'white',\n                    padding: '8px'\n                }\n            }).appendTo(this);\n        });\n\n        // Set saved value if available, otherwise default to first strategy\n        if (window.savedSubchartSelections && window.savedSubchartSelections[selectorId]) {\n            $(this).val(window.savedSubchartSelections[selectorId]);\n        } else if (strategies.length > 0) {\n            // Only set default if no saved selection exists\n            const defaultStrategy = strategies[Math.min(index, strategies.length - 1)];\n            $(this).val(defaultStrategy);\n            // Save this default selection\n            if (!window.savedSubchartSelections) {\n                window.savedSubchartSelections = {};\n            }\n            window.savedSubchartSelections[selectorId] = defaultStrategy;\n            saveSettings();\n        }\n    });\n\n    // Update chart after populating options\n    resetChart();\n}\n",
    "flask_app/strategies/BaseStrategy.py": "import pandas as pd\nfrom abc import ABC, abstractmethod\n\nclass BaseStrategy(ABC):\n    \"\"\"Base interface for all trading strategies.\"\"\"\n\n    @abstractmethod\n    def calculate(self, data: pd.DataFrame, **params):\n        \"\"\"\n        Calculate the strategy's result.\n        \n        Parameters:\n            data (DataFrame): Stock data with 'open', 'close', 'high', 'low', etc.\n            **params: Additional parameters specific to the strategy.\n            \n        Returns:\n            Dataframes: Processed data.\n        \"\"\"\n        pass\n        raise NotImplementedError(\"Subclasses must implement the 'calculate' method.\")\n\n    @abstractmethod\n    def get_input_parameters(self):\n        \"\"\"\n        Get the required input parameters for the strategy.\n        \n        Returns:\n            dict: Dictionary of parameter names and their default values.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def name(self):\n        \"\"\"\n        Get the name of the strategy.\n        \n        Returns:\n            str: Strategy name in lowercase.\n        \"\"\"\n        pass\n\n    def get_config(self):\n        \"\"\"\n        Get the configuration for the strategy's outputs.\n        \n        Returns:\n            dict: Dictionary mapping output names to their visualization configs.\n        \"\"\"\n        return {}\n\n    @abstractmethod\n    def is_self_based(self):\n        \"\"\"\n        Identify whether the strategy is self-based or cross-based.\n        Self-based: Only requires data from the individual stock.\n        Cross-based: Requires data from multiple stocks at the same timestamp.\n        \n        Returns:\n            bool: True if self-based, False if cross-based.\n        \"\"\"\n        pass\n",
    "flask_app/strategies/StrategyManager.py": "import inspect\nfrom strategies.TechnicalStrategies import *  # Import all strategies dynamically\nimport strategies.TechnicalStrategies as TechnicalStrategies\nfrom strategies.BaseStrategy import BaseStrategy\n\nclass StrategyManager:\n    \"\"\"StrategyManager class that loads and manages different stock strategies.\"\"\"\n    \n    _strategies = {}\n\n    @classmethod\n    def _load_strategies(cls):\n        \"\"\"Automatically load all strategies defined in the TechnicalStrategies module.\"\"\"\n        for name, obj in inspect.getmembers(TechnicalStrategies):\n            # Check if the object is a class and is a subclass of BaseStrategy\n            if inspect.isclass(obj) and issubclass(obj, BaseStrategy) and obj != BaseStrategy:\n                strategy_instance = obj()  # Create an instance of the strategy class\n                cls._strategies[strategy_instance.name()] = strategy_instance\n        # print(cls._strategies)\n\n    @classmethod\n    def get_strategy(cls, name: str) -> BaseStrategy:\n        \"\"\"Retrieve a strategy instance by its name.\"\"\"\n        if not cls._strategies:\n            cls._load_strategies()  # Load strategies when needed\n        return cls._strategies.get(name.lower(), None)\n\n    @classmethod\n    def available_strategies(cls) -> list:\n        \"\"\"Get a list of available strategy names.\"\"\"\n        if not cls._strategies:\n            cls._load_strategies()  # Load strategies when needed\n        return list(cls._strategies.keys())\n",
    "flask_app/strategies/TechnicalStrategies.py": "import pandas as pd\nfrom BaseStrategy import BaseStrategy\n# from strategies.BaseStrategy import BaseStrategy\nimport os\n\n# Helper function to replace NaN values (can be reused in data_processor)\ndef replace_invalid(arr):\n    \"\"\"Replace invalid values (NaN) with 0.\"\"\"\n    return arr.fillna(0)\n\nclass VolumeStrategy(BaseStrategy):\n    \"\"\"Volume strategy that returns the volume data.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Volume strategy.\"\"\"\n        return {\n            \"period\": 20  # Default period for volume-based strategy\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 20):\n        \"\"\"Return the volume data for the given period.\"\"\"\n        df = df.copy()\n        \n        # Simply return the volume data\n        df['volume'] = df['vol']  # Assuming 'vol' is the column containing volume data\n        \n        return df[['volume']]  # Return DataFrame with volume column\n\n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"volume\"\n\n    def get_config(self):\n        return {\n            'chart_group': 'volume_analysis',\n            'chart_name': 'Volume Analysis',\n            'outputs': {\n                'volume': {\n                    'color': '#FFA07A',  # Light salmon\n                    'type': 'bar',\n                    'name': 'Volume',\n                    'order': 1\n                }\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n\n# MACD Strategy\nclass MACDStrategy(BaseStrategy):\n    \"\"\"MACD strategy to calculate the MACD line, Signal line, and Histogram.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the MACD strategy.\"\"\"\n        return {\n            \"fast_period\": 12,  # Default period for fast EMA\n            \"slow_period\": 26,  # Default period for slow EMA\n            \"signal_period\": 9  # Default period for signal line\n        }\n\n    def calculate(self, df: pd.DataFrame, fast_period: int=12, slow_period: int=26, signal_period: int=9):\n        df = df.copy()\n        # Calculate MACD line (DIF)\n        fast_ema = df['close'].ewm(span=fast_period, adjust=False).mean()\n        slow_ema = df['close'].ewm(span=slow_period, adjust=False).mean()\n        macd = fast_ema - slow_ema  # This is the MACD line (DIF)\n        \n        # Calculate Signal line (DEA)\n        signal = macd.ewm(span=signal_period, adjust=False).mean()\n        \n        # Calculate Histogram (MACD - Signal)\n        histogram = (macd - signal)*2\n\n        # Return DataFrame with all components\n        df['macd'] = macd\n        df['signal'] = signal\n        df['histogram'] = histogram\n        return df[['macd', 'signal', 'histogram']]\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"macd\"\n\n    def get_config(self):\n        return {\n            'chart_group': 'macd_analysis',  # Indicates these outputs should be in the same chart\n            'chart_name': 'MACD Analysis',   # Display name for the chart\n            'outputs': {\n                'macd': {\n                    'color': '#FF6B6B',  # Coral red\n                    'type': 'line',\n                    'name': 'MACD Line',\n                    'order': 1  # Display order in the chart\n                },\n                'signal': {\n                    'color': '#FFD700',  # Gold\n                    'type': 'line',\n                    'name': 'Signal Line',\n                    'order': 2\n                },\n                'histogram': {\n                    'type': 'bar',\n                    'name': 'MACD Histogram',\n                    'order': 0,  # Display behind the lines\n                    'use_color_from': 'histogram'  # Special flag to use histogram coloring\n                }\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n\n# RSI Strategy\nclass RSIStrategy(BaseStrategy):\n    \"\"\"RSI strategy to calculate the Relative Strength Index.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the RSI strategy.\"\"\"\n        return {\n            \"period\": 5  # Default period for RSI\n        }\n\n    def calculate(self, data: pd.DataFrame, period: int = 5):\n        delta = data['close'].diff()\n        gain = (delta.where(delta > 0, 0)).fillna(0)\n        loss = (-delta.where(delta < 0, 0)).fillna(0)\n        avg_gain = gain.rolling(window=period).mean()\n        avg_loss = loss.rolling(window=period).mean()\n\n        rs = avg_gain / avg_loss.replace(0, 0.0001)  # Prevent division by zero\n        rsi = 100 - (100 / (1 + rs))\n\n        df = data.copy()\n        df['rsi'] = replace_invalid(rsi)  # Replace NaN values\n\n        return df[['rsi']]  # Return DataFrame with RSI column\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"rsi\"\n\n    def get_config(self):\n        return {\n            'rsi': {\n                'color': '#FFA500',  # Orange\n                'type': 'line',\n                'name': 'RSI'\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n\n# Volume-based Strategies\nclass HighestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks if the volume of the current day is the highest in the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Highest Volume strategy.\"\"\"\n        return {\n            \"period\": 20  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 20):\n        df = df.copy()\n        df['rolling_max_vol'] = df['vol'].rolling(window=period).max()\n        df['highest_vol_today'] = (df['vol'] == df['rolling_max_vol']).astype(int)  # Convert boolean to 0/1\n\n        return df[['highest_vol_today']]  # Return DataFrame with boolean value (0/1)\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"highest_volume_today\"\n\n    def get_config(self):\n        return {\n            'highest_vol_today': {\n                'color': '#FF4500',  # Orange red\n                'type': 'line',\n                'name': 'Highest Volume Today'\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n\nclass LowestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks if the volume of the current day is the lowest in the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Lowest Volume strategy.\"\"\"\n        return {\n            \"period\": 20  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 20):\n        df = df.copy()\n        df['rolling_min_vol'] = df['vol'].rolling(window=period).min()\n        df['lowest_vol_today'] = (df['vol'] == df['rolling_min_vol']).astype(int)  # Convert boolean to 0/1\n\n        return df[['lowest_vol_today']]  # Return DataFrame with boolean value (0/1)\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"lowest_volume_today\"\n\n    def get_config(self):\n        return {\n            'lowest_vol_today': {\n                'color': '#FFB6C1',  # Light pink\n                'type': 'line',\n                'name': 'Lowest Volume Today'\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n\nclass ExistHighestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks how many days have passed since the highest volume appeared within the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Exist Highest Volume strategy.\"\"\"\n        return {\n            \"period\": 7  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 100):\n        df = df.copy()\n        \n        # Find the index of the highest volume in the rolling window\n        df['highest_vol_idx'] = df['vol'].rolling(window=period).apply(lambda x: x.idxmax(), raw=False)\n\n        # Calculate how many days have passed since the highest volume appeared\n        # Use a safe approach to handle NaN values\n        df['days_since_highest_vol'] = (df.index - df['highest_vol_idx']).fillna(0).astype(int)\n        # print(df['days_since_highest_vol'].tail(20))\n        # print(df[['days_since_highest_vol']])\n        return df[['days_since_highest_vol']]  # Return DataFrame with the days passed\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"days_since_last_high\"\n\n    def get_config(self):\n        return {\n            'days_since_highest_vol': {\n                'color': '#FF8C00',  # Dark orange\n                'type': 'line',\n                'name': 'Days Since Highest Volume'\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n    \n\nclass ExistLowestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks how many days have passed since the lowest volume appeared within the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Exist Lowest Volume strategy.\"\"\"\n        return {\n            \"period\": 7  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 100):\n        df = df.copy()\n        \n        # Find the index of the lowest volume in the rolling window\n        df['lowest_vol_idx'] = df['vol'].rolling(window=period).apply(lambda x: x.idxmin(), raw=False)\n        \n        # Calculate how many days have passed since the lowest volume appeared\n        # Use a safe approach to handle NaN values\n        df['days_since_lowest_vol'] = (df.index - df['lowest_vol_idx']).fillna(0).astype(int)\n        \n        return df[['days_since_lowest_vol']]  # Return DataFrame with the days passed\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"days_since_last_low\"\n\n    def get_config(self):\n        return {\n            'days_since_lowest_vol': {\n                'color': '#DEB887',  # Burlywood (warm brown)\n                'type': 'line',\n                'name': 'Days Since Lowest Volume'\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n\n\n    \nclass MAStrategy(BaseStrategy):\n    \"\"\"Moving Average strategy to calculate various period MAs.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the MA strategy.\"\"\"\n        return {\n            \"periods\": [5, 10, 20]  # Default periods for MA calculations\n        }\n\n    def calculate(self, df: pd.DataFrame, periods: list = [5, 10, 20]):\n        \"\"\"Calculate moving averages for the specified periods.\"\"\"\n        df = df.copy()\n        result_df = pd.DataFrame()\n        \n        for period in periods:\n            ma_name = f'ma{period}'\n            result_df[ma_name] = df['close'].rolling(window=period).mean().bfill().ffill()\n        \n        return result_df\n\n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"ma\"\n\n    def get_config(self):\n        return {\n            'chart_group': 'main_chart',\n            'chart_name': 'Moving Averages',\n            'outputs': {\n                'ma5': {\n                    'color': '#ff4500',  # Red-orange\n                    'type': 'line',\n                    'name': 'MA5',\n                    'order': 1\n                },\n                'ma10': {\n                    'color': '#06a7a0',  # Teal\n                    'type': 'line',\n                    'name': 'MA10',\n                    'order': 2\n                },\n                'ma20': {\n                    'color': '#3c763d',  # Green\n                    'type': 'line',\n                    'name': 'MA20',\n                    'order': 3\n                }\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n    \n\n    \nclass RelativeReturnStrategy(BaseStrategy):\n    \"\"\"\n    Strategy that calculates the relative return ratio of current price compared to \n    the N-day average price from M days ago.\n    \"\"\"\n    \n    def __init__(self):\n        self.N = 5  # Default period for calculating moving average\n        self.M = 20  # Default period for shifting the average\n\n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Relative Return strategy.\"\"\"\n        return {\n            \"N\": self.N,  # Default period for calculating moving average\n            \"M\": self.M,  # Default period for shifting the average\n            \"column\": \"close\"  # Default column to calculate returns for\n        }\n\n    def calculate(self, df: pd.DataFrame, N: int = 5, M: int = 20, column: str = \"close\"):\n        \"\"\"\n        Calculate relative return ratio comparing current value to N-day average from M days ago.\n        \n        Args:\n            df: DataFrame containing stock data\n            N: The period for calculating the moving average\n            M: The number of days to shift the average\n            column: The column to calculate returns for\n            \n        Returns:\n            DataFrame with relative return ratio column\n        \"\"\"\n        self.N = N  # Store the user-defined N\n        self.M = M  # Store the user-defined M\n        \n        df = df.copy()\n        df = df.reset_index(drop=True)  # Reset index to ensure consistent calculations\n        \n        # Ensure the column exists\n        if column not in df.columns:\n            raise ValueError(f\"Column {column} not found in DataFrame\")\n            \n        # Calculate N-day moving average\n        avg_name = f'avg_{column}_last_{N}_days'\n        df[avg_name] = df[column].rolling(window=N, min_periods=1).mean()\n        df[avg_name] = replace_invalid(df[avg_name])\n        \n        # Shift the average by M days\n        shifted_avg_name = f'{avg_name}_shifted_{M}'\n        df[shifted_avg_name] = df[avg_name].shift(M)\n        df[shifted_avg_name] = replace_invalid(df[shifted_avg_name])\n        \n        # Calculate relative return ratio\n        relative_return = f'relative_return_{N}_{M}'\n        df[relative_return] = df[column] / df[shifted_avg_name].replace(0, float('nan')) - 1\n        df[relative_return] = replace_invalid(df[relative_return])\n        \n        # Create result DataFrame with only the relative return column\n        result_df = pd.DataFrame(index=df.index)\n        result_df[relative_return] = df[relative_return]\n        \n        return result_df\n\n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"relative_return\"\n\n    def get_config(self):\n        \"\"\"Return the configuration for the Relative Return strategy.\"\"\"\n        return {\n            'chart_group': 'return_analysis',\n            'chart_name': 'Relative Return Analysis',\n            'outputs': {\n                f'relative_return_{self.N}_{self.M}': {  # Use stored N and M\n                    'color': '#4169E1',  # Royal Blue\n                    'type': 'line',\n                    'name': f'Relative Return ({self.N},{self.M})',  # Updated to reflect dynamic values\n                    'order': 1\n                }\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy only requires individual stock data.\"\"\"\n        return True\n\n\n\nclass RankPercentageStrategy(BaseStrategy):\n    \"\"\"\n    Strategy that calculates normalized rank percentages across all stocks for each date.\n    This is a cross-based strategy that requires data from all stocks to calculate ranks.\n    \"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Rank Percentage strategy.\"\"\"\n        return {\n            \"column\": \"close\"  # Default column to rank\n        }\n\n    def calculate(self, df: pd.DataFrame, column: str = \"close\"):\n        \"\"\"\n        Calculate normalized rank percentages for each stock at each timestamp.\n        \n        Args:\n            df: DataFrame containing all stocks data with MultiIndex [ts_code, date]\n            column: Column name to calculate ranks for\n            \n        Returns:\n            DataFrame with normalized rank percentage column\n        \"\"\"\n        df = df.copy()\n        \n        # Ensure the column exists\n        if column not in df.columns:\n            raise ValueError(f\"Column {column} not found in DataFrame\")\n        \n        # Initialize result DataFrame with the same index as input\n        result_df = pd.DataFrame(index=df.index)\n        result_df['rank_percentage'] = 0.0\n        \n        # Get unique dates from the index\n        if isinstance(df.index, pd.MultiIndex):\n            dates = df.index.get_level_values('date').unique()\n        else:\n            # If somehow we don't have a MultiIndex, try to get dates from column\n            if 'date' in df.columns:\n                dates = df['date'].unique()\n            else:\n                raise ValueError(\"No date information found in DataFrame\")\n        \n        # Calculate ranks for each date\n        for date in dates:\n            if isinstance(df.index, pd.MultiIndex):\n                # Get data for this date using the MultiIndex\n                date_data = df.xs(date, level='date', drop_level=False)\n            else:\n                # Fallback to column-based selection\n                date_data = df[df['date'] == date]\n            \n            # Calculate ranks for this date\n            ranks = date_data[column].rank(ascending=True)\n            count = len(ranks)\n            \n            # Normalize to 0-100 range\n            if count > 1:\n                normalized_ranks = (ranks - 1) / (count - 1) * 100\n            else:\n                normalized_ranks = ranks * 0\n            \n            # Assign ranks back to result DataFrame\n            result_df.loc[date_data.index, 'rank_percentage'] = normalized_ranks\n        \n        return result_df[['rank_percentage']]\n\n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"rank_percentage\"\n\n    def get_config(self):\n        return {\n            'chart_group': 'rank_analysis',\n            'chart_name': 'Rank Percentage Analysis',\n            'outputs': {\n                'rank_percentage': {\n                    'color': '#9370DB',  # Medium purple\n                    'type': 'line',\n                    'name': 'Rank Percentage',\n                    'order': 1\n                }\n            }\n        }\n\n    def is_self_based(self):\n        \"\"\"This strategy requires data from all stocks for comparison.\"\"\"\n        return False\n\n\n\n\n# for testing\ndef load_parquet(file_path):\n    \"\"\"\n    Load a Parquet file into a Pandas DataFrame.\n    :param file_path: Path to the Parquet file.\n    :return: Pandas DataFrame\n    \"\"\"\n    try:\n        df = pd.read_parquet(file_path)\n        print(f\"Loaded Parquet file from {file_path}\")\n        return df\n    except Exception as e:\n        print(f\"Failed to load Parquet file: {e}\")\n        return None\n    \nif __name__ == \"__main__\":\n    # Load sample stock data\n    parquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..\\\\..', 'data', 'merged_data.parquet'))\n    df = load_parquet(parquet_file_path)\n    \n    if df is None or df.empty:\n        print(\"Error: No data loaded from parquet file\")\n        exit(1)\n        \n    print(\"\\nDataFrame Info:\")\n    print(df.info())\n    print(\"\\nAvailable ts_codes:\")\n    print(df['ts_code'].unique())\n    \n    # Test self-based strategy\n    print(\"\\nTesting self-based strategy (MA Strategy):\")\n    # Make sure we're using a ts_code that exists in the data\n    available_ts_codes = df['ts_code'].unique()\n    if len(available_ts_codes) == 0:\n        print(\"Error: No ts_codes found in data\")\n        exit(1)\n        \n    test_ts_code = available_ts_codes[0]\n    print(f\"Using test ts_code: {test_ts_code}\")\n    \n    single_stock_df = df[df['ts_code'] == test_ts_code].copy()\n    if single_stock_df.empty:\n        print(f\"Error: No data found for ts_code {test_ts_code}\")\n        exit(1)\n        \n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    \n    # Verify all required columns exist\n    missing_columns = [col for col in numerical_columns if col not in single_stock_df.columns]\n    if missing_columns:\n        print(f\"Error: Missing columns: {missing_columns}\")\n        print(f\"Available columns: {single_stock_df.columns.tolist()}\")\n        exit(1)\n    \n    print(\"\\nSample of single stock data:\")\n    print(single_stock_df[numerical_columns].head())\n    \n    single_stock_df_processed = single_stock_df[numerical_columns].copy()\n    for col in numerical_columns:\n        single_stock_df_processed[col] = pd.to_numeric(single_stock_df_processed[col], errors='coerce')\n    \n    ma_strategy = MAStrategy()\n    ma_result = ma_strategy.calculate(single_stock_df_processed)\n    print(f\"\\nMA Strategy Result (self-based):\")\n    print(ma_result.head())\n    \n    # Test cross-based strategy\n    print(\"\\nTesting cross-based strategy (Rank Percentage Strategy):\")\n    # For cross-based strategy, we need data from multiple stocks\n    multi_stock_df = df.copy()\n    \n    # Add date column if not present\n    if 'date' not in multi_stock_df.columns:\n        print(\"Error: 'date' column not found in DataFrame\")\n        exit(1)\n    \n    # Convert numerical columns to float\n    multi_stock_df_processed = multi_stock_df.copy()\n    for col in numerical_columns:\n        multi_stock_df_processed[col] = pd.to_numeric(multi_stock_df_processed[col], errors='coerce')\n    \n    print(\"\\nSample of processed multi-stock data:\")\n    print(multi_stock_df_processed[['ts_code', 'date'] + numerical_columns].head())\n    print(multi_stock_df_processed.head(), multi_stock_df_processed.tail())\n    rank_strategy = RankPercentageStrategy()\n    rank_result = rank_strategy.calculate(multi_stock_df_processed, column=\"close\")\n    print(f\"\\nRank Percentage Strategy Result (cross-based):\")\n    print(rank_result.head())\n    \n    # Print strategy types\n    print(\"\\nStrategy Types:\")\n    strategies = [MAStrategy(), MACDStrategy(), RSIStrategy(), VolumeStrategy(), \n                 HighestVOLStrategy(), LowestVOLStrategy(), ExistHighestVOLStrategy(),\n                 ExistLowestVOLStrategy(), RelativeReturnStrategy(), RankPercentageStrategy()]\n    \n    for strategy in strategies:\n        strategy_type = \"Cross-based\" if not strategy.is_self_based() else \"Self-based\"\n        print(f\"{strategy.name()}: {strategy_type}\")",
    "flask_app/strategies/__init__.py": "",
    "flask_app/strategies/strategy_origin/ExistHighestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass ExistHighestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks how many days have passed since the highest volume appeared\n    within the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()\n        df['rolling_max_vol'] = df['vol'].rolling(window=period).max()\n        df['days_since_highest_vol'] = df.apply(\n            lambda row: (row.name - df[df['vol'] == row['rolling_max_vol']].index[-1]).days if row['vol'] == row['rolling_max_vol'] else None, axis=1\n        )\n        \n        return {\n            \"days_since_highest_vol\": df['days_since_highest_vol'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/ExistLowestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass ExistLowestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks how many days have passed since the lowest volume appeared\n    within the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()\n        df['rolling_min_vol'] = df['vol'].rolling(window=period).min()\n        df['days_since_lowest_vol'] = df.apply(\n            lambda row: (row.name - df[df['vol'] == row['rolling_min_vol']].index[-1]).days if row['vol'] == row['rolling_min_vol'] else None, axis=1\n        )\n        \n        return {\n            \"days_since_lowest_vol\": df['days_since_lowest_vol'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/HighestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass HighestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks if the volume of the current day is the highest in the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()  # Work on a copy of the dataframe to avoid changing the original\n        df['rolling_max_vol'] = df['vol'].rolling(window=period).max()\n        df['highest_vol_today'] = df['vol'] == df['rolling_max_vol']\n        \n        return {\n            \"highest_vol_today\": df['highest_vol_today'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/LFS.md": "这个计算过程实现了一个基于换手率的动态指标LFS，通过递归平滑和比较两个不同衰减速度的换手率序列，反映市场的相对活跃程度。具体步骤如下：\n\n初始化：设定初始值 $ a[1] = 0 $ 和 $ b[1] = 0 $。\n换手率计算：每个时间点的换手率 $ hsl = \\frac{vol}{capital} $。\n递归平滑：\n短期平滑（a）：$ a[i] = hsl + 0.8 \\cdot (1 - hsl) \\cdot a[i-1] $，使用较快的衰减系数（0.8），对换手率进行短期敏感度较高的平滑。\n长期平滑（b）：$ b[i] = hsl + \\frac{12}{13} \\cdot (1 - hsl) \\cdot b[i-1] $，使用较慢的衰减系数（≈0.923），对换手率进行长期趋势的平滑。\n指标生成：最终计算 $ LFS = 100 \\cdot \\left(1 - \\frac{a}{b}\\right) $，通过比较短期和长期平滑值的比率，生成0附近的百分比指标。\n\n作用与意义：\n短期与长期对比：a的快速衰减使其对近期换手率变化更敏感，而b的缓慢衰减反映长期趋势。当换手率上升时，a比b增长更快，导致LFS下降；反之，换手率下降时，LFS上升。\n市场状态判断：LFS较高（接近100）表明换手率长期偏低（市场冷清），可能处于超卖状态；LFS较低（接近0）表明换手率长期偏高（市场活跃），可能处于超买状态。\n动态适应：由于换手率动态变化，LFS通过自适应平滑系数，灵活捕捉市场热度的变化。\n\n公式推导（稳态分析）：\n假设换手率恒定（$ hsl = h $），a和b的稳态值为：\n$$\nA = \\frac{h}{0.2 + 0.8h}, \\quad B = \\frac{13h}{1 + 12h}\n$$\n此时 $ LFS = 100 \\cdot \\left(1 - \\frac{A}{B}\\right) $，在 $ h \\in [0, 1] $ 时，LFS介于0（$ h=1 $）和约61.54（$ h \\to 0 $）之间，动态反映换手率水平。\n\n结论：LFS指标通过对比短期和长期换手率平滑值，量化市场活跃度的相对变化，为判断超买超卖提供参考。",
    "flask_app/strategies/strategy_origin/LowestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass LowestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks if the volume of the current day is the lowest in the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()\n        df['rolling_min_vol'] = df['vol'].rolling(window=period).min()\n        df['lowest_vol_today'] = df['vol'] == df['rolling_min_vol']\n        \n        return {\n            \"lowest_vol_today\": df['lowest_vol_today'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/MACDStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass MACDStrategy(BaseStrategy):\n    \"\"\"\n    MACD strategy to calculate the MACD line and the Signal line.\n    \"\"\"\n    \n    def calculate(self, df: pd.DataFrame, fast_period, slow_period, signal_period):\n        \"\"\"\n        Calculate the MACD and Signal line.\n        \n        :param df: DataFrame containing stock data.\n        :param fast_period: Period for the fast EMA.\n        :param slow_period: Period for the slow EMA.\n        :param signal_period: Period for the Signal line.\n        :return: Dictionary with MACD line and Signal line.\n        \"\"\"\n        df = df.copy()\n        fast_ema = df['close'].ewm(span=fast_period, adjust=False).mean()\n        slow_ema = df['close'].ewm(span=slow_period, adjust=False).mean()\n        macd = fast_ema - slow_ema\n        signal = macd.ewm(span=signal_period, adjust=False).mean()\n        \n        return {\n            \"macd\": macd.tolist(),\n            \"signal\": signal.tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/RSIStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\nimport os\n\nclass RSIStrategy(BaseStrategy):\n    \"\"\"\n    RSI strategy to calculate the Relative Strength Index.\n    \"\"\"\n\n    def calculate(self, data: pd.DataFrame, period: int = 5):\n        \"\"\"\n        Calculate RSI for the given DataFrame.\n        \n        Parameters:\n            data (DataFrame): Stock data with a 'close' column.\n            period (int): Number of periods for RSI calculation.\n            \n        Returns:\n            dict: RSI values.\n        \"\"\"\n        delta = data['close'].diff()\n        gain = (delta.where(delta > 0, 0)).fillna(0)\n        loss = (-delta.where(delta < 0, 0)).fillna(0)\n        avg_gain = gain.rolling(window=period).mean()\n        avg_loss = loss.rolling(window=period).mean()\n        \n        rs = avg_gain / avg_loss.replace(0, 0.0001)  # Prevent division by zero\n        rsi = 100 - (100 / (1 + rs))\n        rsi = rsi.tolist()\n        rsi = replace_invalid(rsi)\n\n        \n        return rsi\n\ndef replace_invalid(arr):\n    \"\"\"Replace invalid values (NaN) with -1.\"\"\"\n    return [x if pd.notnull(x) else 0 for x in arr]\n\n\n# for testing\ndef load_parquet(file_path):\n    \"\"\"\n    Load a Parquet file into a Pandas DataFrame.\n    :param file_path: Path to the Parquet file.\n    :return: Pandas DataFrame\n    \"\"\"\n    try:\n        df = pd.read_parquet(file_path)\n        print(f\"Loaded Parquet file from {file_path}\")\n        return df\n    except Exception as e:\n        print(f\"Failed to load Parquet file: {e}\")\n        return None\n    \nif __name__ == \"__main__\":\n    # Load sample stock data\n    parquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..\\\\..', 'data', 'merged_data.parquet'))\n    df = load_parquet(parquet_file_path)\n    df = df[df['ts_code'] == \"00001\"]\n    df = df.copy()  # Explicitly create a copy\n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    df = df[numerical_columns].copy()\n    # print(df)\n    df = df.astype(float)\n    \n    # Calculate RSI\n    strategy = RSIStrategy()\n    rsi = strategy.calculate(df)\n    rsi = replace_invalid(rsi)\n    \n    # print(rsi)",
    "flask_app/templates/chat.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Chat</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='styles.css') }}\">\n    <style>\n        /* Inline styles for chatbox, adjust as needed */\n        .chatbox {\n            width: 100%;\n            max-width: 600px;\n            margin: 0 auto;\n            border: 1px solid #ccc;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #f9f9f9;\n        }\n        .chatbox-header {\n            font-size: 1.2em;\n            margin-bottom: 10px;\n        }\n        .chatbox-messages {\n            height: 300px;\n            overflow-y: scroll;\n            border: 1px solid #ddd;\n            padding: 5px;\n            margin-bottom: 10px;\n            background-color: #fff;\n        }\n        .chatbox-input {\n            width: calc(100% - 22px);\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"chatbox\">\n        <div class=\"chatbox-header\">Welcome, {{ username }}!</div>\n        <div class=\"chatbox-messages\">\n            <!-- Messages will appear here -->\n        </div>\n        <input type=\"text\" class=\"chatbox-input\" placeholder=\"Type a message...\">\n    </div>\n</body>\n</html> ",
    "flask_app/templates/dashboard.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dashboard</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/dashboard.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            min-height: 100vh;\n            font-family: Arial, sans-serif;\n            background: linear-gradient(135deg, #000000, #434343) fixed;\n            background-size: cover;\n            background-repeat: no-repeat;\n            background-position: center;\n            color: #ffffff;\n            overflow-x: hidden;\n            position: relative;\n        }\n        .dashboard-container {\n            display: grid;\n            grid-template-columns: 1fr;\n            height: 100vh;\n            overflow: hidden;\n            background: rgba(255, 255, 255, 0.1);\n            backdrop-filter: blur(10px);\n            position: relative;\n            z-index: 1;\n            width: 100%;\n        }\n        .menu-button {\n            position: fixed;\n            top: 20px;\n            left: 20px;\n            z-index: 1002;\n            background: rgba(255, 255, 255, 0.1);\n            border: none;\n            color: white;\n            padding: 10px;\n            border-radius: 8px;\n            cursor: pointer;\n            backdrop-filter: blur(5px);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            transition: all 0.3s ease;\n            width: 40px;\n            height: 40px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .menu-button:hover {\n            background: rgba(255, 255, 255, 0.2);\n            transform: scale(1.05);\n        }\n        .menu-button i {\n            font-size: 1.5em;\n        }\n        .sidebar {\n            position: fixed;\n            left: -100%;\n            top: 0;\n            height: 100vh;\n            width: 300px;\n            background: rgba(0, 0, 0, 0.8);\n            padding: 80px 25px 25px;\n            border-right: 1px solid rgba(255, 255, 255, 0.2);\n            backdrop-filter: blur(10px);\n            transition: all 0.3s ease-in-out;\n            z-index: 1001;\n            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.3);\n            transform: translateX(-300px);\n        }\n        .sidebar.active {\n            left: 0;\n            transform: translateX(0);\n        }\n        .sidebar-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100vw;\n            height: 100vh;\n            background: rgba(0, 0, 0, 0.5);\n            backdrop-filter: blur(3px);\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease-in-out;\n            z-index: 1000;\n            pointer-events: none;\n        }\n        .sidebar-overlay.active {\n            opacity: 1;\n            visibility: visible;\n            pointer-events: auto;\n        }\n        .main-content {\n            position: relative;\n            z-index: 1;\n            display: flex;\n            flex-direction: column;\n            height: 100%;\n            width: 100%;\n            padding-top: 80px;\n            box-sizing: border-box;\n            overflow: hidden;\n        }\n        .chat-header {\n            padding: 15px 25px;\n            background: rgba(255, 255, 255, 0.1);\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n            font-size: 18px;\n            font-weight: bold;\n            backdrop-filter: blur(5px);\n            text-align: center;\n            width: 100%;\n            box-sizing: border-box;\n        }\n        .chat-container {\n            flex: 1;\n            min-height: 0;\n            display: flex;\n            flex-direction: column;\n            background: rgba(255, 255, 255, 0.05);\n            width: 100%;\n            box-sizing: border-box;\n            position: relative;\n        }\n        .scroll-to-bottom {\n            position: absolute;\n            bottom: 100px;\n            right: 20px;\n            width: 40px;\n            height: 40px;\n            border-radius: 50%;\n            background: #007bff;\n            color: white;\n            border: none;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n            transition: all 0.3s ease;\n            z-index: 1000;\n        }\n        .scroll-to-bottom:hover {\n            background: #0056b3;\n            transform: translateY(-2px);\n        }\n        .scroll-to-bottom i {\n            font-size: 1.2em;\n        }\n        .chat-content {\n            flex: 1;\n            min-height: 0;\n            overflow-y: auto;\n        }\n        .chat-messages {\n            padding: 40px;\n            display: flex;\n            flex-direction: column;\n            gap: 15px;\n            width: 100%;\n            box-sizing: border-box;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        .message {\n            max-width: 70%;\n            padding: 12px 16px;\n            border-radius: 15px;\n            margin: 4px 0;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n        }\n        .user-message {\n            background: rgba(0, 123, 255, 0.3);\n            align-self: flex-end;\n            backdrop-filter: blur(5px);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n        }\n        .ai-message {\n            background: rgba(255, 255, 255, 0.1);\n            align-self: flex-start;\n            backdrop-filter: blur(5px);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n        }\n        .chat-input-container {\n            padding: 20px 40px;\n            background: rgba(255, 255, 255, 0.1);\n            border-top: 1px solid rgba(255, 255, 255, 0.2);\n            display: flex;\n            gap: 15px;\n            backdrop-filter: blur(5px);\n            width: 100%;\n            box-sizing: border-box;\n        }\n        .chat-input {\n            flex: 1;\n            padding: 15px;\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            border-radius: 25px;\n            background: rgba(255, 255, 255, 0.1);\n            color: #ffffff;\n            font-size: 16px;\n            outline: none;\n            max-width: 1120px;\n            margin: 0 auto;\n        }\n        .chat-input:focus {\n            background: rgba(255, 255, 255, 0.2);\n            border-color: rgba(255, 255, 255, 0.4);\n        }\n        .send-button {\n            padding: 15px 30px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 25px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            font-weight: bold;\n        }\n        .send-button:hover {\n            background: #0056b3;\n            transform: translateY(-2px);\n        }\n        .user-info {\n            margin-bottom: 20px;\n            padding: 15px;\n            background: rgba(255, 255, 255, 0.1);\n            border-radius: 15px;\n            backdrop-filter: blur(5px);\n        }\n        .user-info h2 {\n            color: #ffffff;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n            font-size: 1.2em;\n            text-align: center;\n            margin: 0;\n            padding: 10px;\n            line-height: 1.4;\n            word-wrap: break-word;\n        }\n        .nav-links {\n            display: flex;\n            flex-direction: column;\n            gap: 12px;\n            padding: 15px;\n            background: rgba(255, 255, 255, 0.1);\n            border-radius: 15px;\n            backdrop-filter: blur(5px);\n        }\n        .nav-link {\n            padding: 15px 20px;\n            text-decoration: none;\n            color: #ffffff;\n            border-radius: 12px;\n            background: rgba(255, 255, 255, 0.15);\n            transition: all 0.3s ease;\n            text-align: center;\n            font-weight: 500;\n            font-size: 1.1em;\n            letter-spacing: 0.5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        .nav-link:hover {\n            background: rgba(255, 255, 255, 0.25);\n            transform: translateY(-2px);\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n        }\n        /* Scrollbar styling */\n        .chat-content::-webkit-scrollbar {\n            width: 8px;\n        }\n        .chat-content::-webkit-scrollbar-track {\n            background: rgba(255, 255, 255, 0.1);\n            border-radius: 4px;\n        }\n        .chat-content::-webkit-scrollbar-thumb {\n            background: rgba(255, 255, 255, 0.2);\n            border-radius: 4px;\n        }\n        .chat-content::-webkit-scrollbar-thumb:hover {\n            background: rgba(255, 255, 255, 0.3);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"dashboard-container\">\n        <button class=\"menu-button\" id=\"menuButton\">\n            <i class=\"fas fa-bars\"></i>\n        </button>\n        \n        <div class=\"sidebar-overlay\" id=\"sidebarOverlay\"></div>\n        \n        <div class=\"sidebar\" id=\"sidebar\">\n            <div class=\"user-info\">\n                <h2>Welcome, {{ username }}!</h2>\n            </div>\n            <div class=\"nav-links\">\n                <a href=\"{{ url_for('stock') }}\" class=\"nav-link\">Analyze Stocks</a>\n                <a href=\"{{ url_for('logout') }}\" class=\"nav-link\">Logout</a>\n            </div>\n        </div>\n        \n        <div class=\"main-content\">\n            <div class=\"chat-header\">\n                AI Assistant\n            </div>\n            <div class=\"chat-container\">\n                <div class=\"chat-content\">\n                    <div id=\"reasoningContainer\" style=\"display: none; margin: 5px 40px; padding: 10px; background: #333; color: #ddd; font-size: 0.8em; border-radius: 5px;\"></div>\n                    <div class=\"chat-messages\" id=\"chatMessages\">\n                        <div class=\"message ai-message\">\n                            Hello! How can I help you today?\n                        </div>\n                    </div>\n                </div>\n                <button class=\"scroll-to-bottom\" id=\"scrollToBottom\">\n                    <i class=\"fas fa-arrow-down\"></i>\n                </button>\n                <div class=\"chat-input-container\">\n                    <input type=\"text\" class=\"chat-input\" id=\"messageInput\" placeholder=\"Type your message here...\">\n                    <button class=\"send-button\" onclick=\"sendMessage()\">Send</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        const menuButton = document.getElementById('menuButton');\n        const sidebar = document.getElementById('sidebar');\n        const sidebarOverlay = document.getElementById('sidebarOverlay');\n        const scrollToBottomBtn = document.getElementById('scrollToBottom');\n        const chatContent = document.querySelector('.chat-content');\n        let isOpen = false;\n\n        function toggleSidebar(event) {\n            if (event) {\n                event.stopPropagation();\n            }\n            isOpen = !isOpen;\n            sidebar.classList.toggle('active');\n            sidebarOverlay.classList.toggle('active');\n            menuButton.innerHTML = isOpen ? '<i class=\"fas fa-times\"></i>' : '<i class=\"fas fa-bars\"></i>';\n        }\n\n        function closeSidebar(event) {\n            if (isOpen) {\n                isOpen = false;\n                sidebar.classList.remove('active');\n                sidebarOverlay.classList.remove('active');\n                menuButton.innerHTML = '<i class=\"fas fa-bars\"></i>';\n            }\n        }\n\n        // Menu button click handler\n        menuButton.addEventListener('click', function(event) {\n            event.stopPropagation();\n            toggleSidebar();\n        });\n\n        // Overlay click handler\n        sidebarOverlay.addEventListener('click', function(event) {\n            event.stopPropagation();\n            closeSidebar();\n        });\n\n        // Close sidebar when clicking outside\n        document.addEventListener('click', function(event) {\n            if (isOpen && \n                !sidebar.contains(event.target) && \n                !menuButton.contains(event.target)) {\n                closeSidebar();\n            }\n        });\n\n        // Prevent clicks inside sidebar from closing it\n        sidebar.addEventListener('click', function(event) {\n            event.stopPropagation();\n        });\n\n        // Add scroll event listener to show/hide scroll button\n        chatContent.addEventListener('scroll', function() {\n            const scrollPosition = chatContent.scrollTop + chatContent.clientHeight;\n            const scrollHeight = chatContent.scrollHeight;\n            const threshold = 100; // Show button when user has scrolled up more than 100px from bottom\n            \n            if (scrollHeight - scrollPosition > threshold) {\n                scrollToBottomBtn.style.display = 'flex';\n            } else {\n                scrollToBottomBtn.style.display = 'none';\n            }\n        });\n\n        // Scroll to bottom button click handler\n        scrollToBottomBtn.addEventListener('click', function() {\n            chatContent.scrollTop = chatContent.scrollHeight;\n        });\n\n        // Added new function to simulate typing animation\n        function typeText(element, text, speed, callback) {\n            let index = 0;\n            \n            function typeNext() {\n                if (index < text.length) {\n                    element.textContent += text[index];\n                    index++;\n                    setTimeout(typeNext, speed);\n                } else {\n                    if (callback) callback();\n                }\n            }\n            typeNext();\n        }\n\n        function sendMessage() {\n            const input = document.getElementById('messageInput');\n            const message = input.value.trim();\n            if (message) {\n                const chatMessages = document.getElementById('chatMessages');\n                const chatContent = document.querySelector('.chat-content');\n                \n                // Add user message\n                const userMessage = document.createElement('div');\n                userMessage.className = 'message user-message';\n                userMessage.textContent = message;\n                chatMessages.appendChild(userMessage);\n                \n                // Clear input\n                input.value = '';\n                \n                // Scroll to bottom after user message\n                chatContent.scrollTop = chatContent.scrollHeight;\n                \n                // Create an AI message bubble with loading indicator and timer\n                const aiMessage = document.createElement('div');\n                aiMessage.className = 'message ai-message';\n                // Ensure text wraps properly\n                aiMessage.style.whiteSpace = 'pre-wrap';\n\n                const loadingSpan = document.createElement('span');\n                loadingSpan.textContent = \"Loading...\";\n                const timerSpan = document.createElement('span');\n                timerSpan.style.marginLeft = \"10px\";\n                timerSpan.textContent = \"(0.0s)\";\n                aiMessage.appendChild(loadingSpan);\n                aiMessage.appendChild(timerSpan);\n                chatMessages.appendChild(aiMessage);\n                \n                // Scroll to bottom after adding loading message\n                chatContent.scrollTop = chatContent.scrollHeight;\n\n                let startTime = Date.now();\n                const timerInterval = setInterval(() => {\n                    let elapsed = ((Date.now() - startTime) / 1000).toFixed(1);\n                    timerSpan.textContent = `(${elapsed}s)`;\n                }, 100);\n\n                // Send the message to the backend and handle the AI response\n                fetch('/chat_message', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ message: message })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    clearInterval(timerInterval);\n                    let elapsed = ((Date.now() - startTime) / 1000).toFixed(1);\n                    // Clear the aiMessage content for typing animation\n                    aiMessage.innerHTML = \"\";\n                    let mainContent = \"\";\n                    let reasoning = \"\";\n                    const rawResponse = data.response || data.error || 'No response';\n                    try {\n                        let parsed = JSON.parse(rawResponse);\n                        for (let key in parsed) {\n                            if (key === \"reasoning_content\") {\n                                reasoning = parsed[key];\n                            } else {\n                                mainContent += key + \": \" + parsed[key] + \"\\n\";\n                            }\n                        }\n                    } catch(e) {\n                        mainContent = rawResponse;\n                    }\n\n                    // Update reasoningContainer if reasoning exists\n                    const reasoningContainer = document.getElementById('reasoningContainer');\n                    if (reasoning) {\n                        reasoningContainer.style.display = 'block';\n                        reasoningContainer.textContent = \"\";\n                        typeText(reasoningContainer, reasoning, 30);\n                    } else {\n                        reasoningContainer.style.display = 'none';\n                    }\n\n                    // Animate typing of mainContent in aiMessage\n                    typeText(aiMessage, mainContent, 30, () => {\n                        // Append response time info after typing is complete\n                        const timeInfo = document.createElement('div');\n                        timeInfo.style.fontSize = '0.8em';\n                        timeInfo.style.color = '#aaa';\n                        timeInfo.textContent = \"Response time: \" + elapsed + \" seconds\";\n                        aiMessage.appendChild(timeInfo);\n                    });\n                })\n                .catch(error => {\n                    clearInterval(timerInterval);\n                    console.error('Error:', error);\n                });\n            }\n        }\n\n        // Allow Enter key to send message\n        document.getElementById('messageInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                sendMessage();\n            }\n        });\n    </script>\n</body>\n</html>",
    "flask_app/templates/index.html": "<!-- \n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n</head>\n<body>\n    <h1>Welcome to the Stock Monitor App!</h1>\n    <a href=\"{{ url_for('login') }}\">Login</a>\n</body>\n</html> -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/index.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n</head>\n<body>\n    <div class=\"home-container\">\n        <h1>Welcome to the Stock Monitor App!</h1>\n        <a href=\"{{ url_for('login') }}\" class=\"login-link\">Login</a>\n    </div>\n</body>\n</html>",
    "flask_app/templates/login.html": "<!-- <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n</head>\n<body>\n    <div class=\"login-container\">\n        <h2>Login</h2>\n        <form method=\"POST\">\n            <div class=\"input-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required>\n            </div>\n            <div class=\"remember-group\">\n                <label>\n                    <input type=\"checkbox\" name=\"remember\" id=\"remember\"> \n                    Remember Me\n                </label>\n            </div>\n            <button type=\"submit\" class=\"login-btn\">Login</button>\n        </form>\n        <p class=\"register-link\">Don't have an account? <a href=\"{{ url_for('register') }}\">Register here</a></p>\n        <p class=\"flash-message\" style=\"color:red\">{{ get_flashed_messages() }}</p>\n    </div>\n</body>\n</html> -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/login.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n</head>\n<body>\n    <div class=\"login-container\">\n        <h2>Login</h2>\n        <form method=\"POST\">\n            <div class=\"input-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required>\n            </div>\n            <div class=\"remember-group\">\n                <label>\n                    <input type=\"checkbox\" name=\"remember\" id=\"remember\"> \n                    Remember Me\n                </label>\n            </div>\n            <button type=\"submit\" class=\"login-btn\">Login</button>\n        </form>\n        <p class=\"register-link\">Don't have an account? <a href=\"{{ url_for('register') }}\">Register here</a></p>\n        <p class=\"flash-message\" style=\"color:red\">{{ get_flashed_messages() }}</p>\n    </div>\n</body>\n</html>",
    "flask_app/templates/register.html": "<!-- <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Register</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/style.css') }}\">\n</head>\n<body>\n    <h2>Create an Account</h2>\n    <form method=\"POST\">\n        <label for=\"username\">Username</label>\n        <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required><br><br>\n\n        <label for=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\" required><br><br>\n\n        <label for=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required><br><br>\n\n        <label for=\"password2\">Confirm Password</label>\n        <input type=\"password\" id=\"password2\" name=\"password2\" placeholder=\"Confirm your password\" required><br><br>\n\n        <button type=\"submit\">Register</button>\n    </form>\n    <p style=\"color:red\">{{ get_flashed_messages() }}</p>\n</body>\n</html> -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Register</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/register.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n</head>\n<body>\n    <div class=\"register-container\">\n        <h2>Create an Account</h2>\n        <form method=\"POST\">\n            <div class=\"input-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password2\">Confirm Password</label>\n                <input type=\"password\" id=\"password2\" name=\"password2\" placeholder=\"Confirm your password\" required>\n            </div>\n            <button type=\"submit\" class=\"register-btn\">Register</button>\n        </form>\n        <p class=\"login-link\">Already have an account? <a href=\"{{ url_for('login') }}\">Login here</a></p>\n        <p class=\"flash-message\" style=\"color:red\">{{ get_flashed_messages() }}</p>\n    </div>\n</body>\n</html>",
    "flask_app/templates/stock.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>Stock Analytics</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/index.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/stock.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"></script>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <script src=\"{{ url_for('static', filename='js/chart_utils.js') }}\"></script>\n    <!-- <script src=\"{{ url_for('static', filename='js/subchart_manager.js') }}\"></script> -->\n</head>\n<body>\n    <button class=\"menu-button\" id=\"menuButton\">\n        <i class=\"fas fa-bars\"></i>\n    </button>\n    \n    <div class=\"sidebar-overlay\" id=\"sidebarOverlay\"></div>\n    \n    <div class=\"sidebar\" id=\"sidebar\">\n        <div class=\"user-info\">\n            <h2>Welcome, {{ username }}!</h2>\n        </div>\n        <div class=\"nav-links\">\n            <a href=\"{{ url_for('stock') }}\" class=\"nav-link\">Analyze Stocks</a>\n            <a href=\"{{ url_for('dashboard') }}\" class=\"nav-link\">Chat Assistant</a>\n            <a href=\"{{ url_for('logout') }}\" class=\"nav-link\">Logout</a>\n        </div>\n    </div>\n\n    <div class=\"stock-container\">\n        <h2>Stock Analyzer</h2>\n        \n        <div class=\"controls-wrapper\">\n            <div class=\"search-container\">\n                <div class=\"input-group\">\n                    <label for=\"stockInput\">Stock Code:</label>\n                    <input type=\"text\" id=\"stockInput\" name=\"stockInput\" placeholder=\"Enter ts_code\" value=\"00001\" onkeypress=\"if (event.which == 13) searchStock()\">\n                </div>\n            </div>\n\n            <div class=\"subchart-controls\">\n                <label for=\"subchartCount\">Subcharts:</label>\n                <select id=\"subchartCount\" onchange=\"updateSubcharts()\">\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                </select>\n                <div class=\"subchart-selectors-container\"></div>\n            </div>\n\n            <div class=\"interaction-panel\">\n                <button onclick=\"resetChart()\" class=\"btn btn-sm\">Reset View</button>\n            </div>\n        </div>\n\n        <div class=\"chart-container\">\n            <div id=\"stockChart\"></div>\n            <div class=\"resize-handle\"></div>\n        </div>\n    </div>\n\n    <script>\n        const menuButton = document.getElementById('menuButton');\n        const sidebar = document.getElementById('sidebar');\n        const sidebarOverlay = document.getElementById('sidebarOverlay');\n        let isOpen = false;\n\n        function toggleSidebar(event) {\n            if (event) {\n                event.stopPropagation();\n            }\n            isOpen = !isOpen;\n            sidebar.classList.toggle('active');\n            sidebarOverlay.classList.toggle('active');\n            menuButton.innerHTML = isOpen ? '<i class=\"fas fa-times\"></i>' : '<i class=\"fas fa-bars\"></i>';\n        }\n\n        function closeSidebar(event) {\n            if (isOpen) {\n                isOpen = false;\n                sidebar.classList.remove('active');\n                sidebarOverlay.classList.remove('active');\n                menuButton.innerHTML = '<i class=\"fas fa-bars\"></i>';\n            }\n        }\n\n        // Menu button click handler\n        menuButton.addEventListener('click', function(event) {\n            event.stopPropagation();\n            toggleSidebar();\n        });\n\n        // Overlay click handler\n        sidebarOverlay.addEventListener('click', function(event) {\n            event.stopPropagation();\n            closeSidebar();\n        });\n\n        // Close sidebar when clicking outside\n        document.addEventListener('click', function(event) {\n            if (isOpen && \n                !sidebar.contains(event.target) && \n                !menuButton.contains(event.target)) {\n                closeSidebar();\n            }\n        });\n\n        // Prevent clicks inside sidebar from closing it\n        sidebar.addEventListener('click', function(event) {\n            event.stopPropagation();\n        });\n    </script>\n</body>\n</html>"
}