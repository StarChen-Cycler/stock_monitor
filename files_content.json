{
    "flask_app/app.py": "\nimport os\nfrom flask import Flask,render_template_string, render_template, redirect, url_for, request, flash\nfrom flask_login import LoginManager, login_required, logout_user, login_user, current_user\nfrom auth import authenticate_user, register_user\nfrom flask_migrate import Migrate\nfrom models import db, User, init_db\nfrom config import Config\nfrom flask import jsonify\nfrom data_loader.data_loader import load_parquet\nfrom data_loader.data_processor import process_main_stock_data, process_strategy_data\nfrom strategies.StrategyManager import StrategyManager\n\n# ================== 配置区域 ==================\n# Define the base path of the app\nbase_path = os.path.abspath(os.path.dirname(__file__))\n\n# Folder paths\nTEMPLATES_FOLDER = os.path.join(base_path, 'templates')\nSTATIC_FOLDER = os.path.join(base_path, 'static')\nprint('TEMPLATES_FOLDER:', TEMPLATES_FOLDER)\nprint('STATIC_FOLDER:', STATIC_FOLDER)\n\nINDEX_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'index.html')\nREGISTER_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'register.html')\nLOGIN_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'login.html')\nSTOCK_TEMPLATE_PATH = os.path.join(TEMPLATES_FOLDER, 'stock.html')\n\n# ================== 初始化区域 ==================\n# Initialize Flask app with template and static folder paths\napp = Flask(__name__, template_folder=TEMPLATES_FOLDER, static_folder=STATIC_FOLDER)\napp.config.from_object(Config)\n\n\n# Initialize database\ndb.init_app(app)\n\n# Initialize Flask-Migrate\nmigrate = Migrate(app, db)\n\n# Load Parquet file at app startup\nparquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data', 'merged_data.parquet'))\ndf = load_parquet(parquet_file_path)\n\n# Initialize LoginManager\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\n\n# User loader callback\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.before_first_request\ndef create_tables():\n    init_db(app)\n\n# Root route\n@app.route('/')\ndef home():\n    with open(INDEX_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content)\n\n# Register page route\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        email = request.form['email']\n        password = request.form['password']\n        password2 = request.form['password2']\n\n        # Check if passwords match\n        if password != password2:\n            flash('Passwords do not match', 'danger')\n            return redirect(url_for('register'))\n\n        # Register the user\n        if register_user(username, email, password):\n            flash('Account created successfully! You can now login.', 'success')\n            return redirect(url_for('login'))\n        else:\n            flash('User already exists.', 'danger')\n            return redirect(url_for('register'))\n\n    with open(REGISTER_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content)\n\n# Login page route\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        remember = 'remember' in request.form  # True if checkbox is checked\n        user = authenticate_user(username, password)\n        if user:\n            login_user(user, remember=remember)  # Pass 'remember' to login_user\n            return redirect(url_for('dashboard'))\n        else:\n            flash('Invalid username or password', 'danger')  # Flash error message\n    with open(LOGIN_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content)\n\n# Logout route\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('login'))\n\n# Protected page (only accessible by logged-in users)\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    return render_template('dashboard.html', username=current_user.username)\n\n# Add a new route for the stock page\n@app.route('/stock')\n@login_required\ndef stock():\n    with open(STOCK_TEMPLATE_PATH, 'r') as file:\n        html_content = file.read()\n    return render_template_string(html_content, username=current_user.username)\n    # return render_template('stock.html', username=current_user.username)\n\n@app.route('/stock_data', methods=['GET', 'POST'])\n@login_required\ndef stock_data():\n    if request.method == 'POST':\n        request_data = request.json\n        ts_code = request_data.get('ts_code')\n        strategies = request_data.get('strategies', [])\n    else:\n        ts_code = request.args.get('ts_code')\n        strategies = []\n\n    if not strategies:\n        available_strategies = StrategyManager.available_strategies()  # Get all strategies dynamically\n        strategies = [{'name': strategy, 'params': {**StrategyManager.get_strategy(strategy).get_input_parameters()}} for strategy in available_strategies]\n\n    if not ts_code:\n        return jsonify({'error': 'Missing ts_code'}), 400\n    \n    stock_data = df[df['ts_code'] == ts_code]\n    if stock_data.empty:\n        return jsonify({'error': 'No data found'}), 404\n\n    # Process main stock data\n    main_data = process_main_stock_data(stock_data)\n\n    # Process strategies\n    strategy_results = process_strategy_data(stock_data, strategies)\n\n    # Combine results\n    response = {\n        'main': main_data,\n        'strategies': strategy_results\n    }\n\n    return jsonify(response)\n\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n",
    "flask_app/auth.py": "from flask_login import login_user\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom flask import flash\nfrom models import User, db\n\n# Authentication logic\ndef authenticate_user(username, password):\n    user = User.query.filter_by(username=username).first()\n    if user and user.check_password(password):\n        return user  # Return the user object\n    return None  # Return None if authentication fails\n\n# Registration logic\ndef register_user(username, email, password):\n    # Check if the user already exists\n    if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():\n        return False  # User already exists\n\n    # Create a new user\n    user = User(username=username, email=email)\n    user.set_password(password)  # Set the password using hash\n    db.session.add(user)\n    db.session.commit()  # Save the new user in the database\n    return True\n",
    "flask_app/config.py": "import os\nfrom datetime import timedelta\n\nclass Config:\n    SECRET_KEY = os.urandom(24)  # Used for encrypting sessions and tokens\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///site.db'  # SQLite database path\n    SQLALCHEMY_TRACK_MODIFICATIONS = False  # Disable SQLAlchemy's object modification tracking\n    SESSION_COOKIE_NAME = 'flask_session_cookie'  # Custom cookie name\n    REMEMBER_COOKIE_DURATION = timedelta(days=30)",
    "flask_app/models.py": "\nfrom flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_login import UserMixin\n\n# Initialize the SQLAlchemy instance\ndb = SQLAlchemy()\n\n# User model\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(120), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128), nullable=False)\n\n    def __repr__(self):\n        return f\"User('{self.username}', '{self.email}')\"\n\n    # Set password (hash the password)\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    # Check password (validate if the entered password is correct)\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n# Initialize database (create tables)\ndef init_db(app):\n    with app.app_context():\n        db.create_all()  # This creates the tables in the database\n",
    "flask_app/requirements.txt": "\nFlask==2.0.3\nFlask-Login==0.5.0\nFlask-SQLAlchemy==2.5.1\nFlask-Migrate==3.1.0\nWerkzeug==2.0.3\n",
    "flask_app/data_loader/data_loader.py": "import os\nimport pandas as pd\n\ndef load_parquet(file_path):\n    \"\"\"\n    Load a Parquet file into a Pandas DataFrame.\n    :param file_path: Path to the Parquet file.\n    :return: Pandas DataFrame\n    \"\"\"\n    try:\n        df = pd.read_parquet(file_path)\n        print(f\"Loaded Parquet file from {file_path}\")\n        return df\n    except Exception as e:\n        print(f\"Failed to load Parquet file: {e}\")\n        return None",
    "flask_app/data_loader/data_processor.py": "from strategies.StrategyManager import StrategyManager\nimport pandas as pd\n\n# Helper function to replace NaN values (can be reused in data_processor)\ndef replace_invalid(arr):\n    \"\"\"Replace invalid values (NaN) with 0.\"\"\"\n    return arr.fillna(0)\n\ndef process_main_stock_data(df: pd.DataFrame) -> dict:\n    \"\"\"Process main stock data for visualization.\"\"\"\n    df = df.copy()  # Explicitly create a copy\n    x_data = df['date'].tolist()\n    df[['open', 'close', 'low', 'high']] = df[['open', 'close', 'low', 'high']].astype(float)\n    candle_data = df[['open', 'close', 'low', 'high']].values.tolist()\n    # print(\"Candle Data:\", candle_data)\n    close_prices = df['close'].astype(float).tolist()\n    \n    # Calculate moving averages\n    ma5 = calculate_ma(5, close_prices)\n    ma10 = calculate_ma(10, close_prices)\n    ma20 = calculate_ma(20, close_prices)\n    \n    return {\n        'x_data': x_data,\n        'candle_data': candle_data,\n        'close_prices': close_prices,\n        'ma5': ma5,\n        'ma10': ma10,\n        'ma20': ma20\n    }\n\n\n# def process_strategy_data(df, strategy_configs):\n#     \"\"\"\n#     Process stock data using the provided strategy configurations.\n    \n#     :param df: DataFrame containing stock data.\n#     :param strategy_configs: List of strategy configurations.\n#     :return: Dictionary with strategy names and calculated results.\n#     \"\"\"\n#     results = {}\n#     manager = StrategyManager()\n\n#     df = df.copy()  # Explicitly create a copy\n#     numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n#     df = df[numerical_columns].copy()\n#     df = df.astype(float)\n\n#     for config in strategy_configs:\n#         strategy = manager.get_strategy(config[\"name\"])\n#         if strategy:\n#             df_result = strategy.calculate(df, **config[\"params\"])\n#             # Convert the DataFrame result to list format for the front-end\n#             results[config[\"name\"]] = replace_invalid(df_result.iloc[:, 0]).tolist()\n#         else:\n#             results[config[\"name\"]] = {\"error\": f\"Strategy {config['name']} not found.\"}\n\n#     print(\"results:\",results[:500])\n#     return results\n\ndef process_strategy_data(df: pd.DataFrame, strategy_configs: list) -> dict:\n    \"\"\"\n    Process stock data using the provided strategy configurations.\n    \n    :param df: DataFrame containing stock data.\n    :param strategy_configs: List of strategy configurations.\n    :return: Dictionary with strategy names and calculated results.\n    \"\"\"\n    results = {}\n    manager = StrategyManager()\n\n    df = df.copy()  # Explicitly create a copy\n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    df = df[numerical_columns].copy()\n    df = df.astype(float)\n\n    # Loop over strategy configurations and process\n    for config in strategy_configs:\n        strategy = manager.get_strategy(config[\"name\"])\n        if strategy:\n            # Get the required input params for the strategy\n            input_params = strategy.get_input_parameters()\n\n            # Adjust input parameters if they are missing\n            adjusted_params = {param: config[\"params\"].get(param, default) for param, default in input_params.items()}\n\n            try:\n                # Run the strategy with the adjusted parameters\n                df_result = strategy.calculate(df, **adjusted_params)\n\n                # Replace NaN values\n                df_result = replace_invalid(df_result)\n\n                # Add results to the output dictionary based on strategy outputs\n                for output_name, _ in df_result.items():\n                    results[output_name] = df_result[output_name].tolist()\n\n            except TypeError as e:\n                results[config[\"name\"]] = {\"error\": f\"Error with strategy {config['name']}: {str(e)}\"}\n        else:\n            results[config[\"name\"]] = {\"error\": f\"Strategy {config['name']} not found.\"}\n\n    return results\n\n\n\ndef calculate_ma(period: int, data: list) -> list:\n    \"\"\"Calculate moving average for a given period.\"\"\"\n    ma = []\n    sum_value = 0\n    for i in range(len(data)):\n        sum_value += data[i]\n        if i >= period:\n            sum_value -= data[i - period]\n        if i >= period - 1:\n            ma.append(sum_value / period)\n        else:\n            ma.append(-1)\n    return ma\n",
    "flask_app/data_loader/__init__.py": "",
    "flask_app/static/css/dashboard.css": ".btn {\n    display: inline-block;\n    padding: 10px 20px;\n    margin: 10px;\n    border: none;\n    border-radius: 5px;\n    text-align: center;\n    cursor: pointer;\n    transition: opacity 0.3s ease;\n}\n\n.btn-primary {\n    background-color: #007bff;\n    color: #ffffff;\n}\n\n.btn-secondary {\n    background-color: #6c757d;\n    color: #ffffff;\n}\n\n.btn:hover {\n    opacity: 0.8;\n}",
    "flask_app/static/css/global.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n/* 容器样式 */\n.container {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    padding: 30px;\n    width: 100%;\n    max-width: none;\n    min-width: 500px;\n    text-align: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n/* 标题样式 */\nh1, h2 {\n    font-weight: bold;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    margin-bottom: 20px;\n}\n\n/* 输入框样式 */\n\n.input-group input {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: rgba(255, 255, 255, 0.2);\n    color: #ffffff;\n    font-size: 16px;\n    outline: none;\n}\n\n.input-group input:focus, .input-group select:focus {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n/* 按钮样式 */\n.btn {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: #007bff;\n    color: #ffffff;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.btn:hover {\n    background: #0056b3;\n}\n\n/* 链接样式 */\n.link {\n    font-size: 14px;\n    margin-top: 15px;\n}\n\n.link a {\n    color: #007bff;\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.link a:hover {\n    color: #0056b3;\n}\n\n/* 闪现消息样式 */\n.flash-message {\n    margin-top: 10px;\n    font-size: 14px;\n    color: red;\n}\n\n.btn-sm {\n    width: auto;\n    padding: 5px 10px;\n    margin: 5px;\n}\n\n.chart-container {\n    /* width: 100%; */\n    height: 400px;\n    margin-top: 20px;\n}\n",
    "flask_app/static/css/index.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.home-container {\n    text-align: center;\n    max-width: 600px;\n    margin: auto;\n    padding: 20px;\n    border-radius: 15px;\n    background: rgba(255, 255, 255, 0.1);\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.home-container h1 {\n    font-size: 36px;\n    font-weight: bold;\n    margin-bottom: 20px;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n}\n\n.login-link {\n    display: inline-block;\n    padding: 10px 20px;\n    border: 2px solid #007bff;\n    border-radius: 5px;\n    color: #ffffff;\n    text-decoration: none;\n    font-size: 18px;\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.login-link:hover {\n    background-color: #007bff;\n    color: #ffffff;\n}",
    "flask_app/static/css/login.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.login-container {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    padding: 30px;\n    width: 350px;\n    text-align: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.login-container h2 {\n    margin-bottom: 20px;\n    font-size: 24px;\n    font-weight: bold;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n}\n\n.input-group {\n    margin-bottom: 15px;\n    text-align: left;\n}\n\n.input-group label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 14px;\n    color: #ffffff;\n}\n\n.input-group input {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: rgba(255, 255, 255, 0.2);\n    color: #ffffff;\n    font-size: 16px;\n    outline: none;\n}\n\n.input-group input:focus {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n.remember-group {\n    text-align: left;\n    margin-bottom: 15px;\n}\n\n.remember-group label {\n    font-size: 14px;\n    color: #ffffff;\n}\n\n.remember-group input {\n    margin-right: 5px;\n}\n\n.login-btn {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: #007bff;\n    color: #ffffff;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.login-btn:hover {\n    background: #0056b3;\n}\n\n.register-link {\n    font-size: 14px;\n    margin-top: 15px;\n}\n\n.register-link a {\n    color: #007bff;\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.register-link a:hover {\n    color: #0056b3;\n}\n\n.flash-message {\n    margin-top: 10px;\n    font-size: 14px;\n}",
    "flask_app/static/css/register.css": "/* 基本样式重置 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Arial', sans-serif;\n}\n\nbody {\n    background: linear-gradient(135deg, #000000, #434343);\n    color: #ffffff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.register-container {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 15px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    padding: 30px;\n    width: 400px;\n    text-align: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.register-container h2 {\n    font-size: 24px;\n    font-weight: bold;\n    margin-bottom: 20px;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n}\n\n.input-group {\n    margin-bottom: 15px;\n    text-align: left;\n}\n\n.input-group label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 14px;\n    color: #ffffff;\n}\n\n.input-group input {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: rgba(255, 255, 255, 0.2);\n    color: #ffffff;\n    font-size: 16px;\n    outline: none;\n}\n\n.input-group input:focus {\n    background: rgba(255, 255, 255, 0.3);\n}\n\n.register-btn {\n    width: 100%;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n    background: #007bff;\n    color: #ffffff;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.register-btn:hover {\n    background: #0056b3;\n}\n\n.login-link {\n    font-size: 14px;\n    margin-top: 15px;\n}\n\n.login-link a {\n    color: #007bff;\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.login-link a:hover {\n    color: #0056b3;\n}\n\n.flash-message {\n    margin-top: 10px;\n    font-size: 14px;\n}",
    "flask_app/static/css/stock.css": "/* static/css/stock.css */\n.stock-container {\n    position: relative;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px; \n    min-width: 300px;\n    margin: 0 auto;\n    height:100%;\n}\n\n.chart-container {\n    position: absolute;\n    top: 200px;\n    width: 1200px;\n    height: 1500px;\n    /* margin-top: 20px; */\n}\n\nhtml {\n    max-width: 100%;\n    overflow-x: hidden; /* 隐藏水平滚动条 */\n}\n\n.search-container {\n    position: absolute;\n    top: 60px;\n    left: 20px;\n}\n\n\n.input-group {\n    display: flex;\n    align-items: center;\n}\n\n#stockInput {\n    width: 120px;\n    margin-right: 10px;\n    /* padding: 5px; */\n    margin-left:10px;\n}\n\n\n\n.interaction-panel {\n    position: absolute;\n    top: 140px;\n    margin-top: 10px;\n    text-align: center;\n}\n\n.btn-sm {\n    margin: 5px;\n}\n\n\n\n.subchart-controls {\n    position: absolute;\n    top: 100px;\n    display: flex;\n    justify-content: center;\n    margin-top: 10px;\n}\n\n.subchart-controls {\n    position: absolute;\n    top: 100px;\n    display: flex;\n    align-items: center;\n}\n\n.subchart-selectors-container {\n    margin-left: 20px;\n    display: flex;\n    gap: 20px;\n}\n\n.subchart-selector {\n    padding: 5px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}",
    "flask_app/static/js/chart_utils copy 2.js": "let chart = null;\nlet subcharts = [];\n\n$(document).ready(function() {\n    let fetchedData = null; // Declare a variable to hold the fetched data\n    searchStock(fetchedData);\n});\n\nfunction searchStock() {\n    console.log(\"searchStock() called\");\n    var tsCode = $('#stockInput').val().trim();\n    if (!tsCode) {\n        alert('Please enter a valid stock code');\n        console.log(\"No stock code entered.\");\n        return;\n    }\n\n    // Fetch data and build chart\n    $.ajax({\n        url: '/stock_data',\n        method: 'GET',\n        data: { ts_code: tsCode },\n        dataType: 'json',\n        success: function(data) {\n            console.log(\"Data received:\", data);\n            if (data.error) {\n                alert(data.error);\n                console.log(\"Error in data:\", data.error);\n                return;\n            }\n            fetchedData = data;\n            updateSubchartSelectorsOptions(); \n            buildChart(data.main, data.strategies);\n        },\n        error: function(xhr, status, error) {\n            alert('Error retrieving stock data');\n            console.log(\"AJAX error:\", error);\n        }\n    });\n}\n\n// Helper function to create initial configuration for charts and also for updating the chart\nfunction setChartParams(subchartCount, mainData) {\n    // Fixed pixel values for positioning and grid heights\n    const chartHeight = 1200;  // Height of the chart container\n    const mainChartHeight = 500;  // Main chart height (candlestick)\n    const subchartHeight = 150;  // Each subchart (RSI, Volume) height\n    const startPoint = 90;\n    const endPoint = 100;\n    // Calculate the bottom position for dataZoom to be below the last grid\n    const totalHeight = mainChartHeight + (subchartCount * (subchartHeight + 5)); // Total height of all grids\n    const dataZoomBottom = totalHeight + 80; // Adding some space between the last grid and dataZoom\n\n    // Set grid configuration for all charts\n    let gridConfig = [\n        {\n            left: 50,\n            right: 50,\n            top: 50, // Slightly under the legend\n            height: mainChartHeight, // Height of the main chart\n\n        }\n    ];\n\n    let legendConfig = [\n        {\n            data: ['Candlestick', 'MA5', 'MA10', 'MA20', 'RSI', 'Volume'],\n            top: 10, // Positioning legend slightly near the top\n            left: 'center'\n        }\n    ];\n\n    let xAxisConfig = [\n        {\n            type: 'category',\n            data: mainData.x_data,\n            scale: true,\n            boundaryGap: false,\n            axisLine: { onZero: false }\n        },\n    ];\n\n    let yAxisConfig = [\n        {\n            scale: true,\n            splitArea: { show: true }\n        }\n    ];\n\n    let dataZoomConfig = [\n        {\n            type: 'slider',\n            show: true,\n            xAxisIndex: [0],\n            filterMode: 'filter',\n            height: 30,\n            top: dataZoomBottom, // Dynamically set the bottom position\n            handleSize: '80%',\n            handleStyle: { color: '#d3dee5' },\n            backgroundStyle: { color: '#f8fcff' },\n            dataBackground: { lineStyle: { color: '#5793f3' }, areaStyle: { color: '#e3f6ff' } },\n            start: startPoint,\n            end: endPoint\n        },\n        {\n            type: 'inside',\n            xAxisIndex: [0,1,2,3,4,5],\n            start: startPoint,\n            end: endPoint\n            \n        }\n    ];\n\n    // Dynamically add subcharts based on subchartCount\n    let subchartTop = mainChartHeight + 60;  // Subchart positions (starting below the main chart)\n    for (let i = 0; i < subchartCount; i++) {\n        let gridIndex = i + 1;\n        gridConfig.push({\n            left: 50,\n            right: 50,\n            top: subchartTop + (i * (subchartHeight)) + 10, // Stack subcharts vertically\n            height: subchartHeight,\n        });\n\n        // Add new x and y axes for each subchart\n        xAxisConfig.push({\n            type: 'category',\n            gridIndex: gridIndex,\n            data: mainData.x_data,\n            boundaryGap: false,\n            axisLine: { onZero: false },\n            axisTick: { show: false },\n            splitLine: { show: false },\n            axisLabel: { show: false },\n            min: 'dataMin',\n            max: 'dataMax'\n        });\n\n        yAxisConfig.push({\n            scale: true,\n            gridIndex: gridIndex,\n            splitNumber: 2,\n            axisLabel: { show: false },\n            axisLine: { show: false },\n            axisTick: { show: false },\n            splitLine: { show: true }\n        });\n    }\n\n    \n    \n    return { gridConfig, legendConfig, xAxisConfig, yAxisConfig, dataZoomConfig};\n}\n\nfunction buildChart(mainData, strategiesData) {\n    console.log(\"Building chart...\");\n\n    // Initialize the main chart\n    if (chart) {\n        console.log(\"Disposing of existing chart before reinitializing.\");\n        chart.dispose();\n    }\n\n    chart = echarts.init(document.getElementById('stockChart'));\n    console.log(\"Main chart initialized.\");\n\n    // Get chart configurations dynamically\n    const subchartCount = parseInt($('#subchartCount').val());\n    console.log(\"Subchart count:\", subchartCount);\n\n    const { gridConfig, legendConfig, xAxisConfig, yAxisConfig,dataZoomConfig} = setChartParams(subchartCount, mainData);\n\n    const options = {\n        animation: false,\n        title: {\n            text: 'Stock Candlestick Chart',\n            top: '0%',\n            left: 'left'\n        },\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                snap: true,\n                crossStyle: { color: '#ffffff' }\n            },\n            formatter: function (params) {\n                let tooltip = '';\n                if (!params || params.length === 0) return tooltip;\n                tooltip += params[0].name + '<br>';\n                params.forEach(param => {\n                    if (param.seriesType === 'candlestick') {\n                        const [num, open, close, low, high] = param.value;\n                        tooltip += `Open=${open.toFixed(2)}<br>Close=${close.toFixed(2)}<br>Low=${low.toFixed(2)}<br>High=${high.toFixed(2)}<br>`;\n                    } else {\n                        tooltip += `${param.seriesName}: ${param.value.toFixed(2)}<br>`;\n                    }\n                });\n                return tooltip;\n            }\n        },\n        axisPointer: {\n            link: [\n                { xAxisIndex: 'all' }\n            ],\n            label: {\n                backgroundColor: '#777'\n            }\n        },\n        legend: legendConfig[0], // Dynamically set legend configuration\n        grid: gridConfig, // Dynamically set grid configuration\n        xAxis: xAxisConfig, // Dynamically set xAxis configuration\n        yAxis: yAxisConfig, // Dynamically set yAxis configuration\n        dataZoom: dataZoomConfig, // Dynamically set dataZoom configuration\n        series: [{\n            name: 'Candlestick',\n            type: 'candlestick',\n            data: mainData.candle_data,\n            itemStyle: {\n                color: '#00da3c',\n                color0: '#ec0000',\n                borderColor: '#00da3c',\n                borderColor0: '#ec0000'\n            }\n        }]\n    };\n\n    // Calculate MA Lines\n    const maSeries = [{\n        name: 'MA5',\n        type: 'line',\n        data: mainData.ma5,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#ff4500' },\n        showSymbol: false\n    }, {\n        name: 'MA10',\n        type: 'line',\n        data: mainData.ma10,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#06a7a0' },\n        showSymbol: false\n    }, {\n        name: 'MA20',\n        type: 'line',\n        data: mainData.ma20,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#3c763d' },\n        showSymbol: false\n    }];\n\n    options.series.push(...maSeries);\n\n    // Add MarkPoints\n    options.series[0].markPoint = {\n        label: {\n            formatter: (param) => Math.round(param.value) || 0,\n            color: '#000000'\n        },\n        data: [{\n            name: '最高',\n            type: 'max',\n            valueDim: 'highest',\n            symbol: 'pin',\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            }\n        }, {\n            name: '最低',\n            type: 'min',\n            valueDim: 'lowest',\n            symbol: 'pin',\n            symbolRotate: 180,\n            symbolOffset: [0, 0],\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            },\n            label: {\n                offset: [0, 10]\n            }\n        }]\n    };\n\n    // // Add Subcharts (RSI and Volume) if available\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 1 && strategiesData.rsi) {\n    //     options.series.push({\n    //         name: 'RSI',\n    //         type: 'line',\n    //         data: strategiesData.rsi,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#ff00ff' },\n    //         showSymbol: false,\n    //         xAxisIndex: 1,  // Sync with the subchart x-axis\n    //         yAxisIndex: 1   // Sync with the subchart y-axis\n    //     });\n    // }\n\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 2 && strategiesData.days_since_highest_vol) {\n    //     options.series.push({\n    //         name: 'Days Since Highest Volume',\n    //         type: 'line',\n    //         data: strategiesData.days_since_highest_vol,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#ff0000' },\n    //         showSymbol: false,\n    //         xAxisIndex: 2,  // Sync with the subchart x-axis\n    //         yAxisIndex: 2   // Sync with the subchart y-axis\n    //     });\n    //     console.log(\"Days Since Highest Volume data added to chart.\");\n    // }\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 3 && strategiesData.days_since_lowest_vol) {\n    //     options.series.push({\n    //         name: 'Days Since Lowest Volume',\n    //         type: 'line',\n    //         data: strategiesData.days_since_lowest_vol,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#0000ff' },\n    //         showSymbol: false,\n    //         xAxisIndex: 3,  // Sync with the subchart x-axis\n    //         yAxisIndex: 3   // Sync with the subchart y-axis\n    //     });\n    //     console.log(\"Days Since Lowest Volume data added to chart.\");\n    // }\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 4 && strategiesData.volume) {\n    //     options.series.push({\n    //         name: 'Volume',\n    //         type: 'bar',\n    //         data: strategiesData.volume,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#0f00ff' },\n    //         showSymbol: false,\n    //         xAxisIndex: 4,  // Sync with the subchart x-axis\n    //         yAxisIndex: 4   // Sync with the subchart y-axis\n    //     });\n    //     console.log(\"Volume data added to chart.\");\n    // }\n\n    for (let i = 0; i < subchartCount; i++) {\n        const selectorId = `subchart${i + 1}`;\n        const selectedStrategy = $(`#${selectorId}`).val();\n        if (selectedStrategy && strategiesData[selectedStrategy]) {\n            const seriesName = selectedStrategy;\n            options.series.push({\n                name: seriesName,\n                type: selectedStrategy === 'volume' ? 'bar' : 'line',\n                data: strategiesData[selectedStrategy],\n                smooth: false,\n                lineStyle: { width: 1 },\n                itemStyle: { color: getColorForStrategy(seriesName) },\n                showSymbol: false,\n                xAxisIndex: i + 1,\n                yAxisIndex: i + 1\n            });\n            console.log(`${seriesName} data added to chart.`);\n        }\n    }\n\n    // Set the final options\n    chart.setOption(options);\n    console.log(\"Chart options applied.\");\n}\n\nfunction resetChart() {\n    console.log(\"resetChart() called\");\n    buildChart(fetchedData.main, fetchedData.strategies);\n}\n\nfunction updateSubcharts() {\n    console.log(\"updateSubcharts() called.\");\n    updateSubchartSelectors()\n    resetChart();\n}\n\nfunction updateChartForSubchart(selectorId) {\n    console.log(`Subchart selector ${selectorId} changed.`);\n    resetChart(); \n}\n\n\n// // Function to update subchart selectors based on subchartCount\n// function updateSubchartSelectors() {\n//     console.log(\"11111111111111111111111\")\n//     const subchartCount = parseInt($('#subchartCount').val());\n//     const selectorsContainer = $('.subchart-selectors-container');\n//     selectorsContainer.empty(); // Clear existing selectors\n\n//     for (let i = 0; i < subchartCount; i++) {\n//         const selector = $('<select>', {\n//             id: `subchart${i + 1}`,\n//             class: 'subchart-selector',\n//             onchange: 'updateSubcharts()'\n//         });\n\n//         // If data is available, populate options\n//         if (fetchedData && fetchedData.strategies) {\n//             const strategies = Object.keys(fetchedData.strategies);\n//             strategies.forEach(strategy => {\n//                 $('<option>', {\n//                     value: strategy,\n//                     text: strategy\n//                 }).appendTo(selector);\n//             });\n//         }\n\n//         selectorsContainer.append(selector);\n//     }\n// }\n\n// // Function to populate selector options when data is fetched\n// function updateSubchartSelectorsOptions() {\n//     if (!fetchedData || !fetchedData.strategies) return;\n\n//     const strategies = Object.keys(fetchedData.strategies);\n//     $('.subchart-selector').each(function(index) {\n//         $(this).empty(); // Clear existing options\n//         strategies.forEach(strategy => {\n//             $('<option>', {\n//                 value: strategy,\n//                 text: strategy\n//             }).appendTo(this);\n//         });\n//         // Default to first strategy\n//         $(this).val(strategies[0]).change();\n//     });\n// }\n\n\n// function getColorForStrategy(strategyName) {\n//     switch (strategyName) {\n//         case 'rsi': return '#ff00ff';\n//         case 'days_since_highest_vol': return '#ff0000';\n//         case 'days_since_lowest_vol': return '#0000ff';\n//         case 'volume': return '#0f00ff';\n//         default: return '#000000';\n//     }\n// }\n\n// Function to update subchart selectors based on subchartCount\nfunction updateSubchartSelectors() {\n    const subchartCount = parseInt($('#subchartCount').val());\n    const selectorsContainer = $('.subchart-selectors-container');\n    selectorsContainer.empty();\n\n    for (let i = 0; i < subchartCount; i++) {\n        const selector = $('<select>', {\n            id: `subchart${i + 1}`,\n            class: 'subchart-selector',\n            onchange: function () {\n                // Only update the chart for this specific subchart, no need to call updateSubcharts\n                updateChartForSubchart(this.id); \n            }\n        });\n\n        if (fetchedData && fetchedData.strategies) {\n            const strategies = Object.keys(fetchedData.strategies);\n            strategies.forEach(strategy => {\n                $('<option>', {\n                    value: strategy,\n                    text: strategy\n                }).appendTo(selector);\n            });\n        }\n\n        selectorsContainer.append(selector);\n    }\n}\n\n// Function to populate selector options when data is fetched\nfunction updateSubchartSelectorsOptions() {\n    if (!fetchedData || !fetchedData.strategies) return;\n\n    const strategies = Object.keys(fetchedData.strategies);\n    $('.subchart-selector').each(function(index) {\n        $(this).empty(); // Clear existing options\n        strategies.forEach(strategy => {\n            $('<option>', {\n                value: strategy,\n                text: strategy\n            }).appendTo(this);\n        });\n        // Default to first strategy\n        $(this).val(strategies[0]).change();\n    });\n}\n\nfunction getColorForStrategy(strategyName) {\n    switch (strategyName) {\n        case 'rsi': return '#ff00ff';\n        case 'days_since_highest_vol': return '#ff0000';\n        case 'days_since_lowest_vol': return '#0000ff';\n        case 'volume': return '#0f00ff';\n        default: return '#000000';\n    }\n}",
    "flask_app/static/js/chart_utils edited.js": "let chart = null;\nlet subcharts = [];\n\n$(document).ready(function() {\n    let fetchedData = null; // Declare a variable to hold the fetched data\n    searchStock(fetchedData);\n});\n\nfunction searchStock() {\n    console.log(\"searchStock() called\");\n    var tsCode = $('#stockInput').val().trim();\n    if (!tsCode) {\n        alert('Please enter a valid stock code');\n        console.log(\"No stock code entered.\");\n        return;\n    }\n\n    // Fetch data and build chart\n    $.ajax({\n        url: '/stock_data',\n        method: 'GET',\n        data: { ts_code: tsCode },\n        dataType: 'json',\n        success: function(data) {\n            console.log(\"Data received:\", data);\n            if (data.error) {\n                alert(data.error);\n                console.log(\"Error in data:\", data.error);\n                return;\n            }\n            fetchedData = data;\n            updateSubchartSelectorsOptions(); \n            buildChart(data.main, data.strategies);\n        },\n        error: function(xhr, status, error) {\n            alert('Error retrieving stock data');\n            console.log(\"AJAX error:\", error);\n        }\n    });\n}\n\n// Helper function to create initial configuration for charts and also for updating the chart\nfunction setChartParams(subchartCount, mainData) {\n    // Fixed pixel values for positioning and grid heights\n    const chartHeight = 1200;  // Height of the chart container\n    const mainChartHeight = 500;  // Main chart height (candlestick)\n    const subchartHeight = 150;  // Each subchart (RSI, Volume) height\n    const startPoint = 90;\n    const endPoint = 100;\n    // Calculate the bottom position for dataZoom to be below the last grid\n    const totalHeight = mainChartHeight + (subchartCount * (subchartHeight + 5)); // Total height of all grids\n    const dataZoomBottom = totalHeight + 80; // Adding some space between the last grid and dataZoom\n\n    // Set grid configuration for all charts\n    let gridConfig = [\n        {\n            left: 50,\n            right: 50,\n            top: 50, // Slightly under the legend\n            height: mainChartHeight, // Height of the main chart\n\n        }\n    ];\n\n    let legendConfig = [\n        {\n            data: ['Candlestick', 'MA5', 'MA10', 'MA20', 'RSI', 'Volume'],\n            top: 10, // Positioning legend slightly near the top\n            left: 'center'\n        }\n    ];\n\n    let xAxisConfig = [\n        {\n            type: 'category',\n            data: mainData.x_data,\n            scale: true,\n            boundaryGap: false,\n            axisLine: { onZero: false }\n        },\n    ];\n\n    let yAxisConfig = [\n        {\n            scale: true,\n            splitArea: { show: true }\n        }\n    ];\n\n    let dataZoomConfig = [\n        {\n            type: 'slider',\n            show: true,\n            xAxisIndex: [0],\n            filterMode: 'filter',\n            height: 30,\n            top: dataZoomBottom, // Dynamically set the bottom position\n            handleSize: '80%',\n            handleStyle: { color: '#d3dee5' },\n            backgroundStyle: { color: '#f8fcff' },\n            dataBackground: { lineStyle: { color: '#5793f3' }, areaStyle: { color: '#e3f6ff' } },\n            start: startPoint,\n            end: endPoint\n        },\n        {\n            type: 'inside',\n            xAxisIndex: [0,1,2,3,4,5],\n            start: startPoint,\n            end: endPoint\n            \n        }\n    ];\n\n    // Dynamically add subcharts based on subchartCount\n    let subchartTop = mainChartHeight + 60;  // Subchart positions (starting below the main chart)\n    for (let i = 0; i < subchartCount; i++) {\n        let gridIndex = i + 1;\n        gridConfig.push({\n            left: 50,\n            right: 50,\n            top: subchartTop + (i * (subchartHeight)) + 10, // Stack subcharts vertically\n            height: subchartHeight,\n        });\n\n        // Add new x and y axes for each subchart\n        xAxisConfig.push({\n            type: 'category',\n            gridIndex: gridIndex,\n            data: mainData.x_data,\n            boundaryGap: false,\n            axisLine: { onZero: false },\n            axisTick: { show: false },\n            splitLine: { show: false },\n            axisLabel: { show: false },\n            min: 'dataMin',\n            max: 'dataMax'\n        });\n\n        yAxisConfig.push({\n            scale: true,\n            gridIndex: gridIndex,\n            splitNumber: 2,\n            axisLabel: { show: false },\n            axisLine: { show: false },\n            axisTick: { show: false },\n            splitLine: { show: true }\n        });\n    }\n\n    \n    \n    return { gridConfig, legendConfig, xAxisConfig, yAxisConfig, dataZoomConfig};\n}\n\nfunction buildChart(mainData, strategiesData) {\n    console.log(\"Building chart...\");\n\n    // Initialize the main chart\n    if (chart) {\n        console.log(\"Disposing of existing chart before reinitializing.\");\n        chart.dispose();\n    }\n\n    chart = echarts.init(document.getElementById('stockChart'));\n    console.log(\"Main chart initialized.\");\n\n    // Get chart configurations dynamically\n    const subchartCount = parseInt($('#subchartCount').val());\n    console.log(\"Subchart count:\", subchartCount);\n\n    const { gridConfig, legendConfig, xAxisConfig, yAxisConfig,dataZoomConfig} = setChartParams(subchartCount, mainData);\n\n    const options = {\n        animation: false,\n        title: {\n            text: 'Stock Candlestick Chart',\n            top: '0%',\n            left: 'left'\n        },\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                snap: true,\n                crossStyle: { color: '#ffffff' }\n            },\n            formatter: function (params) {\n                let tooltip = '';\n                if (!params || params.length === 0) return tooltip;\n                tooltip += params[0].name + '<br>';\n                params.forEach(param => {\n                    if (param.seriesType === 'candlestick') {\n                        const [num, open, close, low, high] = param.value;\n                        tooltip += `Open=${open.toFixed(2)}<br>Close=${close.toFixed(2)}<br>Low=${low.toFixed(2)}<br>High=${high.toFixed(2)}<br>`;\n                    } else {\n                        tooltip += `${param.seriesName}: ${param.value.toFixed(2)}<br>`;\n                    }\n                });\n                return tooltip;\n            }\n        },\n        axisPointer: {\n            link: [\n                { xAxisIndex: 'all' }\n            ],\n            label: {\n                backgroundColor: '#777'\n            }\n        },\n        legend: legendConfig[0], // Dynamically set legend configuration\n        grid: gridConfig, // Dynamically set grid configuration\n        xAxis: xAxisConfig, // Dynamically set xAxis configuration\n        yAxis: yAxisConfig, // Dynamically set yAxis configuration\n        dataZoom: dataZoomConfig, // Dynamically set dataZoom configuration\n        series: [{\n            name: 'Candlestick',\n            type: 'candlestick',\n            data: mainData.candle_data,\n            itemStyle: {\n                color: '#00da3c',\n                color0: '#ec0000',\n                borderColor: '#00da3c',\n                borderColor0: '#ec0000'\n            }\n        }]\n    };\n\n    // Calculate MA Lines\n    const maSeries = [{\n        name: 'MA5',\n        type: 'line',\n        data: mainData.ma5,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#ff4500' },\n        showSymbol: false\n    }, {\n        name: 'MA10',\n        type: 'line',\n        data: mainData.ma10,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#06a7a0' },\n        showSymbol: false\n    }, {\n        name: 'MA20',\n        type: 'line',\n        data: mainData.ma20,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#3c763d' },\n        showSymbol: false\n    }];\n\n    options.series.push(...maSeries);\n\n    // Add MarkPoints\n    options.series[0].markPoint = {\n        label: {\n            formatter: (param) => Math.round(param.value) || 0,\n            color: '#000000'\n        },\n        data: [{\n            name: '最高',\n            type: 'max',\n            valueDim: 'highest',\n            symbol: 'pin',\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            }\n        }, {\n            name: '最低',\n            type: 'min',\n            valueDim: 'lowest',\n            symbol: 'pin',\n            symbolRotate: 180,\n            symbolOffset: [0, 0],\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            },\n            label: {\n                offset: [0, 10]\n            }\n        }]\n    };\n\n    // // Add Subcharts (RSI and Volume) if available\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 1 && strategiesData.rsi) {\n    //     options.series.push({\n    //         name: 'RSI',\n    //         type: 'line',\n    //         data: strategiesData.rsi,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#ff00ff' },\n    //         showSymbol: false,\n    //         xAxisIndex: 1,  // Sync with the subchart x-axis\n    //         yAxisIndex: 1   // Sync with the subchart y-axis\n    //     });\n    // }\n\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 2 && strategiesData.days_since_highest_vol) {\n    //     options.series.push({\n    //         name: 'Days Since Highest Volume',\n    //         type: 'line',\n    //         data: strategiesData.days_since_highest_vol,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#ff0000' },\n    //         showSymbol: false,\n    //         xAxisIndex: 2,  // Sync with the subchart x-axis\n    //         yAxisIndex: 2   // Sync with the subchart y-axis\n    //     });\n    //     console.log(\"Days Since Highest Volume data added to chart.\");\n    // }\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 3 && strategiesData.days_since_lowest_vol) {\n    //     options.series.push({\n    //         name: 'Days Since Lowest Volume',\n    //         type: 'line',\n    //         data: strategiesData.days_since_lowest_vol,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#0000ff' },\n    //         showSymbol: false,\n    //         xAxisIndex: 3,  // Sync with the subchart x-axis\n    //         yAxisIndex: 3   // Sync with the subchart y-axis\n    //     });\n    //     console.log(\"Days Since Lowest Volume data added to chart.\");\n    // }\n    // // Dynamically add strategies to the chart based on the selected subchart count\n    // if (subchartCount >= 4 && strategiesData.volume) {\n    //     options.series.push({\n    //         name: 'Volume',\n    //         type: 'bar',\n    //         data: strategiesData.volume,\n    //         smooth: false,\n    //         lineStyle: { width: 1 },\n    //         itemStyle: { color: '#0f00ff' },\n    //         showSymbol: false,\n    //         xAxisIndex: 4,  // Sync with the subchart x-axis\n    //         yAxisIndex: 4   // Sync with the subchart y-axis\n    //     });\n    //     console.log(\"Volume data added to chart.\");\n    // }\n\n    for (let i = 0; i < subchartCount; i++) {\n        const selectorId = `subchart${i + 1}`;\n        const selectedStrategy = $(`#${selectorId}`).val();\n        if (selectedStrategy && strategiesData[selectedStrategy]) {\n            const seriesName = selectedStrategy;\n            options.series.push({\n                name: seriesName,\n                type: selectedStrategy === 'volume' ? 'bar' : 'line',\n                data: strategiesData[selectedStrategy],\n                smooth: false,\n                lineStyle: { width: 1 },\n                itemStyle: { color: getColorForStrategy(seriesName) },\n                showSymbol: false,\n                xAxisIndex: i + 1,\n                yAxisIndex: i + 1\n            });\n            console.log(`${seriesName} data added to chart.`);\n        }\n    }\n\n    // Set the final options\n    chart.setOption(options);\n    console.log(\"Chart options applied.\");\n}\n\nfunction resetChart() {\n    console.log(\"resetChart() called\");\n    buildChart(fetchedData.main, fetchedData.strategies);\n}\n\nfunction updateSubcharts() {\n    console.log(\"updateSubcharts() called.\");\n    updateSubchartSelectors()\n    resetChart();\n}\n\nfunction updateChartForSubchart(selectorId) {\n    console.log(`Subchart selector ${selectorId} changed.`);\n    resetChart(); \n}\n\n\n// // Function to update subchart selectors based on subchartCount\n// function updateSubchartSelectors() {\n//     console.log(\"11111111111111111111111\")\n//     const subchartCount = parseInt($('#subchartCount').val());\n//     const selectorsContainer = $('.subchart-selectors-container');\n//     selectorsContainer.empty(); // Clear existing selectors\n\n//     for (let i = 0; i < subchartCount; i++) {\n//         const selector = $('<select>', {\n//             id: `subchart${i + 1}`,\n//             class: 'subchart-selector',\n//             onchange: 'updateSubcharts()'\n//         });\n\n//         // If data is available, populate options\n//         if (fetchedData && fetchedData.strategies) {\n//             const strategies = Object.keys(fetchedData.strategies);\n//             strategies.forEach(strategy => {\n//                 $('<option>', {\n//                     value: strategy,\n//                     text: strategy\n//                 }).appendTo(selector);\n//             });\n//         }\n\n//         selectorsContainer.append(selector);\n//     }\n// }\n\n// // Function to populate selector options when data is fetched\n// function updateSubchartSelectorsOptions() {\n//     if (!fetchedData || !fetchedData.strategies) return;\n\n//     const strategies = Object.keys(fetchedData.strategies);\n//     $('.subchart-selector').each(function(index) {\n//         $(this).empty(); // Clear existing options\n//         strategies.forEach(strategy => {\n//             $('<option>', {\n//                 value: strategy,\n//                 text: strategy\n//             }).appendTo(this);\n//         });\n//         // Default to first strategy\n//         $(this).val(strategies[0]).change();\n//     });\n// }\n\n\n// function getColorForStrategy(strategyName) {\n//     switch (strategyName) {\n//         case 'rsi': return '#ff00ff';\n//         case 'days_since_highest_vol': return '#ff0000';\n//         case 'days_since_lowest_vol': return '#0000ff';\n//         case 'volume': return '#0f00ff';\n//         default: return '#000000';\n//     }\n// }\n\n// Function to update subchart selectors based on subchartCount\nfunction updateSubchartSelectors() {\n    const subchartCount = parseInt($('#subchartCount').val());\n    const selectorsContainer = $('.subchart-selectors-container');\n    selectorsContainer.empty();\n\n    for (let i = 0; i < subchartCount; i++) {\n        const selector = $('<select>', {\n            id: `subchart${i + 1}`,\n            class: 'subchart-selector',\n            onchange: function () {\n                // Only update the chart for this specific subchart, no need to call updateSubcharts\n                updateChartForSubchart(this.id); \n            }\n        });\n\n        if (fetchedData && fetchedData.strategies) {\n            const strategies = Object.keys(fetchedData.strategies);\n            strategies.forEach(strategy => {\n                $('<option>', {\n                    value: strategy,\n                    text: strategy\n                }).appendTo(selector);\n            });\n        }\n\n        selectorsContainer.append(selector);\n    }\n}\n\n// Function to populate selector options when data is fetched\nfunction updateSubchartSelectorsOptions() {\n    if (!fetchedData || !fetchedData.strategies) return;\n\n    const strategies = Object.keys(fetchedData.strategies);\n    $('.subchart-selector').each(function(index) {\n        $(this).empty(); // Clear existing options\n        strategies.forEach(strategy => {\n            $('<option>', {\n                value: strategy,\n                text: strategy\n            }).appendTo(this);\n        });\n        // Default to first strategy\n        $(this).val(strategies[0]).change();\n    });\n}\n\nfunction getColorForStrategy(strategyName) {\n    switch (strategyName) {\n        case 'rsi': return '#ff00ff';\n        case 'days_since_highest_vol': return '#ff0000';\n        case 'days_since_lowest_vol': return '#0000ff';\n        case 'volume': return '#0f00ff';\n        default: return '#000000';\n    }\n}",
    "flask_app/static/js/chart_utils.js": "let chart = null;\nlet subcharts = [];\n\n$(document).ready(function() {\n    let fetchedData = null; // Declare a variable to hold the fetched data\n    searchStock(fetchedData);\n});\n\nfunction searchStock() {\n    console.log(\"searchStock() called\");\n    var tsCode = $('#stockInput').val().trim();\n    if (!tsCode) {\n        alert('Please enter a valid stock code');\n        console.log(\"No stock code entered.\");\n        return;\n    }\n\n    // Fetch data and build chart\n    $.ajax({\n        url: '/stock_data',\n        method: 'GET',\n        data: { ts_code: tsCode },\n        dataType: 'json',\n        success: function(data) {\n            console.log(\"Data received:\", data);\n            if (data.error) {\n                alert(data.error);\n                console.log(\"Error in data:\", data.error);\n                return;\n            }\n            fetchedData = data;\n            buildChart(data.main, data.strategies);\n        },\n        error: function(xhr, status, error) {\n            alert('Error retrieving stock data');\n            console.log(\"AJAX error:\", error);\n        }\n    });\n}\n\n// Helper function to create initial configuration for charts and also for updating the chart\nfunction setChartParams(subchartCount, mainData) {\n    // Fixed pixel values for positioning and grid heights\n    const chartHeight = 1200;  // Height of the chart container\n    const mainChartHeight = 500;  // Main chart height (candlestick)\n    const subchartHeight = 150;  // Each subchart (RSI, Volume) height\n    const startPoint = 90;\n    const endPoint = 100;\n    // Calculate the bottom position for dataZoom to be below the last grid\n    const totalHeight = mainChartHeight + (subchartCount * (subchartHeight + 5)); // Total height of all grids\n    const dataZoomBottom = totalHeight + 80; // Adding some space between the last grid and dataZoom\n\n    // Set grid configuration for all charts\n    let gridConfig = [\n        {\n            left: 50,\n            right: 50,\n            top: 50, // Slightly under the legend\n            height: mainChartHeight, // Height of the main chart\n\n        }\n    ];\n\n    let legendConfig = [\n        {\n            data: ['Candlestick', 'MA5', 'MA10', 'MA20', 'RSI', 'Volume'],\n            top: 10, // Positioning legend slightly near the top\n            left: 'center'\n        }\n    ];\n\n    let xAxisConfig = [\n        {\n            type: 'category',\n            data: mainData.x_data,\n            scale: true,\n            boundaryGap: false,\n            axisLine: { onZero: false }\n        },\n    ];\n\n    let yAxisConfig = [\n        {\n            scale: true,\n            splitArea: { show: true }\n        }\n    ];\n\n    let dataZoomConfig = [\n        {\n            type: 'slider',\n            show: true,\n            xAxisIndex: [0],\n            filterMode: 'filter',\n            height: 30,\n            top: dataZoomBottom, // Dynamically set the bottom position\n            handleSize: '80%',\n            handleStyle: { color: '#d3dee5' },\n            backgroundStyle: { color: '#f8fcff' },\n            dataBackground: { lineStyle: { color: '#5793f3' }, areaStyle: { color: '#e3f6ff' } },\n            start: startPoint,\n            end: endPoint\n        },\n        {\n            type: 'inside',\n            xAxisIndex: [0,1,2,3,4,5],\n            start: startPoint,\n            end: endPoint\n            \n        }\n    ];\n\n    // Dynamically add subcharts based on subchartCount\n    let subchartTop = mainChartHeight + 60;  // Subchart positions (starting below the main chart)\n    for (let i = 0; i < subchartCount; i++) {\n        let gridIndex = i + 1;\n        gridConfig.push({\n            left: 50,\n            right: 50,\n            top: subchartTop + (i * (subchartHeight)) + 10, // Stack subcharts vertically\n            height: subchartHeight,\n        });\n\n        // Add new x and y axes for each subchart\n        xAxisConfig.push({\n            type: 'category',\n            gridIndex: gridIndex,\n            data: mainData.x_data,\n            boundaryGap: false,\n            axisLine: { onZero: false },\n            axisTick: { show: false },\n            splitLine: { show: false },\n            axisLabel: { show: false },\n            min: 'dataMin',\n            max: 'dataMax'\n        });\n\n        yAxisConfig.push({\n            scale: true,\n            gridIndex: gridIndex,\n            splitNumber: 2,\n            axisLabel: { show: false },\n            axisLine: { show: false },\n            axisTick: { show: false },\n            splitLine: { show: true }\n        });\n    }\n\n    \n    \n    return { gridConfig, legendConfig, xAxisConfig, yAxisConfig, dataZoomConfig};\n}\n\nfunction buildChart(mainData, strategiesData) {\n    console.log(\"Building chart...\");\n\n    // Initialize the main chart\n    if (chart) {\n        console.log(\"Disposing of existing chart before reinitializing.\");\n        chart.dispose();\n    }\n\n    chart = echarts.init(document.getElementById('stockChart'));\n    console.log(\"Main chart initialized.\");\n\n    // Get chart configurations dynamically\n    const subchartCount = parseInt($('#subchartCount').val());\n    console.log(\"Subchart count:\", subchartCount);\n\n    const { gridConfig, legendConfig, xAxisConfig, yAxisConfig,dataZoomConfig} = setChartParams(subchartCount, mainData);\n\n    const options = {\n        animation: false,\n        title: {\n            text: 'Stock Candlestick Chart',\n            top: '0%',\n            left: 'left'\n        },\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                snap: true,\n                crossStyle: { color: '#ffffff' }\n            },\n            formatter: function (params) {\n                let tooltip = '';\n                if (!params || params.length === 0) return tooltip;\n                tooltip += params[0].name + '<br>';\n                params.forEach(param => {\n                    if (param.seriesType === 'candlestick') {\n                        const [num, open, close, low, high] = param.value;\n                        tooltip += `Open=${open.toFixed(2)}<br>Close=${close.toFixed(2)}<br>Low=${low.toFixed(2)}<br>High=${high.toFixed(2)}<br>`;\n                    } else {\n                        tooltip += `${param.seriesName}: ${param.value.toFixed(2)}<br>`;\n                    }\n                });\n                return tooltip;\n            }\n        },\n        axisPointer: {\n            link: [\n                { xAxisIndex: 'all' }\n            ],\n            label: {\n                backgroundColor: '#777'\n            }\n        },\n        legend: legendConfig[0], // Dynamically set legend configuration\n        grid: gridConfig, // Dynamically set grid configuration\n        xAxis: xAxisConfig, // Dynamically set xAxis configuration\n        yAxis: yAxisConfig, // Dynamically set yAxis configuration\n        dataZoom: dataZoomConfig, // Dynamically set dataZoom configuration\n        series: [{\n            name: 'Candlestick',\n            type: 'candlestick',\n            data: mainData.candle_data,\n            itemStyle: {\n                color: '#00da3c',\n                color0: '#ec0000',\n                borderColor: '#00da3c',\n                borderColor0: '#ec0000'\n            }\n        }]\n    };\n\n    // Calculate MA Lines\n    const maSeries = [{\n        name: 'MA5',\n        type: 'line',\n        data: mainData.ma5,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#ff4500' },\n        showSymbol: false\n    }, {\n        name: 'MA10',\n        type: 'line',\n        data: mainData.ma10,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#06a7a0' },\n        showSymbol: false\n    }, {\n        name: 'MA20',\n        type: 'line',\n        data: mainData.ma20,\n        smooth: true,\n        lineStyle: { width: 1 },\n        itemStyle: { color: '#3c763d' },\n        showSymbol: false\n    }];\n\n    options.series.push(...maSeries);\n\n    // Add MarkPoints\n    options.series[0].markPoint = {\n        label: {\n            formatter: (param) => Math.round(param.value) || 0,\n            color: '#000000'\n        },\n        data: [{\n            name: '最高',\n            type: 'max',\n            valueDim: 'highest',\n            symbol: 'pin',\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            }\n        }, {\n            name: '最低',\n            type: 'min',\n            valueDim: 'lowest',\n            symbol: 'pin',\n            symbolRotate: 180,\n            symbolOffset: [0, 0],\n            symbolSize: 40,\n            itemStyle: {\n                color: 'yellow'\n            },\n            label: {\n                offset: [0, 10]\n            }\n        }]\n    };\n\n    // Add Subcharts (RSI and Volume) if available\n    // Dynamically add strategies to the chart based on the selected subchart count\n    if (subchartCount >= 1 && strategiesData.rsi) {\n        options.series.push({\n            name: 'RSI',\n            type: 'line',\n            data: strategiesData.rsi,\n            smooth: false,\n            lineStyle: { width: 1 },\n            itemStyle: { color: '#ff00ff' },\n            showSymbol: false,\n            xAxisIndex: 1,  // Sync with the subchart x-axis\n            yAxisIndex: 1   // Sync with the subchart y-axis\n        });\n    }\n\n    // Dynamically add strategies to the chart based on the selected subchart count\n    if (subchartCount >= 2 && strategiesData.lowest_vol_today) {\n        options.series.push({\n            name: 'Days Since Highest Volume',\n            type: 'line',\n            data: strategiesData.lowest_vol_today,\n            smooth: false,\n            lineStyle: { width: 1 },\n            itemStyle: { color: '#ff0000' },\n            showSymbol: false,\n            xAxisIndex: 2,  // Sync with the subchart x-axis\n            yAxisIndex: 2   // Sync with the subchart y-axis\n        });\n        console.log(\"Days Since Highest Volume data added to chart.\");\n    }\n    // Dynamically add strategies to the chart based on the selected subchart count\n    if (subchartCount >= 3 && strategiesData.highest_vol_today) {\n        options.series.push({\n            name: 'Days Since Lowest Volume',\n            type: 'line',\n            data: strategiesData.highest_vol_today,\n            smooth: false,\n            lineStyle: { width: 1 },\n            itemStyle: { color: '#0000ff' },\n            showSymbol: false,\n            xAxisIndex: 3,  // Sync with the subchart x-axis\n            yAxisIndex: 3   // Sync with the subchart y-axis\n        });\n        console.log(\"Days Since Lowest Volume data added to chart.\");\n    }\n    // Dynamically add strategies to the chart based on the selected subchart count\n    if (subchartCount >= 4 && strategiesData.volume) {\n        options.series.push({\n            name: 'Volume',\n            type: 'bar',\n            data: strategiesData.volume,\n            smooth: false,\n            lineStyle: { width: 1 },\n            itemStyle: { color: '#0f00ff' },\n            showSymbol: false,\n            xAxisIndex: 4,  // Sync with the subchart x-axis\n            yAxisIndex: 4   // Sync with the subchart y-axis\n        });\n        console.log(\"Volume data added to chart.\");\n    }\n\n\n\n    // Set the final options\n    chart.setOption(options);\n    console.log(\"Chart options applied.\");\n}\n\nfunction resetChart() {\n    console.log(\"resetChart() called\");\n    buildChart(fetchedData.main, fetchedData.strategies);\n}\n\nfunction updateSubcharts() {\n    console.log(\"updateSubcharts() called.\");\n    resetChart();\n}\n",
    "flask_app/static/js/subchart_manager.js": "/**\n * Updates the number of subcharts and reinitializes the interface.\n */\nfunction updateSubcharts() {\n    const numSubcharts = parseInt($('#subchartCount').val(), 10) || 0;\n    $('#subchartsContainer').empty();\n    \n    for (let i = 0; i < numSubcharts; i++) {\n        $('#subchartsContainer').append(`\n            <div class=\"subchart\" data-id=\"${i}\">\n                <select class=\"strategySelector\">\n                    <option value=\"\">Select Strategy</option>\n                    <option value=\"macd\">MACD</option>\n                    <option value=\"rsi\">RSI</option>\n                </select>\n                <input type=\"number\" class=\"periodInput\" placeholder=\"Period\">\n                <button class=\"updateButton\">Update</button>\n                <div class=\"subchart-chart\" id=\"subchart-${i}-chart\"></div>\n            </div>\n        `);\n    }\n}\n\n\n\n$(document).on('click', '.updateButton', function() {\n    const subchartId = $(this).closest('.subchart').data('id');\n    const strategyName = $(this).siblings('.strategySelector').val();\n    const period = $(this).siblings('.periodInput').val() || 14;\n    \n    // Send AJAX request to server\n    $.ajax({\n        url: '/stock_data',\n        method: 'POST',\n        contentType: 'application/json',\n        data: JSON.stringify({\n            ts_code: $('#stockInput').val(),\n            strategies: [{\n                name: strategyName,\n                params: { period: parseInt(period) }\n            }]\n        }),\n        success: function(response) {\n            const chart = echarts.init(document.getElementById(`subchart-${subchartId}-chart`));\n            const strategyData = response.strategies[strategyName];\n            updateSubchartChart(chart, strategyName, strategyData);\n        }\n    });\n});\n\nfunction updateSubchartChart(chart, strategyName, strategyData) {\n    const options = {\n        xAxis: {\n            type: 'category'\n        },\n        yAxis: {},\n        series: []\n    };\n    \n    if (strategyName === 'rsi') {\n        options.series = [{\n            name: 'RSI',\n            type: 'line',\n            data: strategyData.rsi\n        }];\n    } else if (strategyName === 'macd') {\n        options.series = [{\n            name: 'MACD Histogram',\n            type: 'bar',\n            data: strategyData.histogram\n        }];\n    }\n    \n    chart.setOption(options);\n}",
    "flask_app/strategies/BaseStrategy.py": "import pandas as pd\nfrom abc import ABC, abstractmethod\n\nclass BaseStrategy(ABC):\n    \"\"\"Base interface for all trading strategies.\"\"\"\n\n    @abstractmethod\n    def calculate(self, data: pd.DataFrame, **params):\n        \"\"\"\n        Calculate the strategy's result.\n        \n        Parameters:\n            data (DataFrame): Stock data with 'open', 'close', 'high', 'low', etc.\n            **params: Additional parameters specific to the strategy.\n            \n        Returns:\n            Dataframes: Processed data.\n        \"\"\"\n        pass\n        raise NotImplementedError(\"Subclasses must implement the 'calculate' method.\")\n",
    "flask_app/strategies/StrategyManager.py": "import inspect\nfrom strategies.TechnicalStrategies import *  # Import all strategies dynamically\nimport strategies.TechnicalStrategies as TechnicalStrategies\nfrom strategies.BaseStrategy import BaseStrategy\n\nclass StrategyManager:\n    \"\"\"StrategyManager class that loads and manages different stock strategies.\"\"\"\n    \n    _strategies = {}\n\n    @classmethod\n    def _load_strategies(cls):\n        \"\"\"Automatically load all strategies defined in the TechnicalStrategies module.\"\"\"\n        for name, obj in inspect.getmembers(TechnicalStrategies):\n            # Check if the object is a class and is a subclass of BaseStrategy\n            if inspect.isclass(obj) and issubclass(obj, BaseStrategy) and obj != BaseStrategy:\n                strategy_instance = obj()  # Create an instance of the strategy class\n                cls._strategies[strategy_instance.name()] = strategy_instance\n        print(cls._strategies)\n\n    @classmethod\n    def get_strategy(cls, name: str) -> BaseStrategy:\n        \"\"\"Retrieve a strategy instance by its name.\"\"\"\n        if not cls._strategies:\n            cls._load_strategies()  # Load strategies when needed\n        return cls._strategies.get(name.lower(), None)\n\n    @classmethod\n    def available_strategies(cls) -> list:\n        \"\"\"Get a list of available strategy names.\"\"\"\n        if not cls._strategies:\n            cls._load_strategies()  # Load strategies when needed\n        return list(cls._strategies.keys())\n",
    "flask_app/strategies/TechnicalStrategies.py": "import pandas as pd\n# from BaseStrategy import BaseStrategy\nfrom strategies.BaseStrategy import BaseStrategy\nimport os\n\n# Helper function to replace NaN values (can be reused in data_processor)\ndef replace_invalid(arr):\n    \"\"\"Replace invalid values (NaN) with 0.\"\"\"\n    return arr.fillna(0)\n\nclass VolumeStrategy(BaseStrategy):\n    \"\"\"Volume strategy that returns the volume data.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Volume strategy.\"\"\"\n        return {\n            \"period\": 20  # Default period for volume-based strategy\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 20):\n        \"\"\"Return the volume data for the given period.\"\"\"\n        df = df.copy()\n        \n        # Simply return the volume data\n        df['volume'] = df['vol']  # Assuming 'vol' is the column containing volume data\n        \n        return df[['volume']]  # Return DataFrame with volume column\n\n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"volume\"\n\n\n# MACD Strategy\nclass MACDStrategy(BaseStrategy):\n    \"\"\"MACD strategy to calculate the MACD line and the Signal line.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the MACD strategy.\"\"\"\n        return {\n            \"fast_period\": 12,  # Default period for fast EMA\n            \"slow_period\": 26,  # Default period for slow EMA\n            \"signal_period\": 9  # Default period for signal line\n        }\n\n    def calculate(self, df: pd.DataFrame, fast_period: int=12, slow_period: int=26, signal_period: int=9):\n        df = df.copy()\n        fast_ema = df['close'].ewm(span=fast_period, adjust=False).mean()\n        slow_ema = df['close'].ewm(span=slow_period, adjust=False).mean()\n        macd = fast_ema - slow_ema\n        signal = macd.ewm(span=signal_period, adjust=False).mean()\n\n        # Return DataFrame with MACD and Signal values\n        df['macd'] = macd\n        df['signal'] = signal\n        return df[['macd', 'signal']]  # Return DataFrame with calculated columns\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"macd\"\n\n# RSI Strategy\nclass RSIStrategy(BaseStrategy):\n    \"\"\"RSI strategy to calculate the Relative Strength Index.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the RSI strategy.\"\"\"\n        return {\n            \"period\": 5  # Default period for RSI\n        }\n\n    def calculate(self, data: pd.DataFrame, period: int = 5):\n        delta = data['close'].diff()\n        gain = (delta.where(delta > 0, 0)).fillna(0)\n        loss = (-delta.where(delta < 0, 0)).fillna(0)\n        avg_gain = gain.rolling(window=period).mean()\n        avg_loss = loss.rolling(window=period).mean()\n\n        rs = avg_gain / avg_loss.replace(0, 0.0001)  # Prevent division by zero\n        rsi = 100 - (100 / (1 + rs))\n\n        df = data.copy()\n        df['rsi'] = replace_invalid(rsi)  # Replace NaN values\n\n        return df[['rsi']]  # Return DataFrame with RSI column\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"rsi\"\n\n# Volume-based Strategies\nclass HighestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks if the volume of the current day is the highest in the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Highest Volume strategy.\"\"\"\n        return {\n            \"period\": 20  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 20):\n        df = df.copy()\n        df['rolling_max_vol'] = df['vol'].rolling(window=period).max()\n        df['highest_vol_today'] = (df['vol'] == df['rolling_max_vol']).astype(int)  # Convert boolean to 0/1\n\n        return df[['highest_vol_today']]  # Return DataFrame with boolean value (0/1)\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"highest_volume_today\"\n\nclass LowestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks if the volume of the current day is the lowest in the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Lowest Volume strategy.\"\"\"\n        return {\n            \"period\": 20  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 20):\n        df = df.copy()\n        df['rolling_min_vol'] = df['vol'].rolling(window=period).min()\n        df['lowest_vol_today'] = (df['vol'] == df['rolling_min_vol']).astype(int)  # Convert boolean to 0/1\n\n        return df[['lowest_vol_today']]  # Return DataFrame with boolean value (0/1)\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"lowest_volume_today\"\n\n\nclass ExistHighestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks how many days have passed since the highest volume appeared within the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Exist Highest Volume strategy.\"\"\"\n        return {\n            \"period\": 7  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 100):\n        df = df.copy()\n        \n        # Find the index of the highest volume in the rolling window\n        df['highest_vol_idx'] = df['vol'].rolling(window=period).apply(lambda x: x.idxmax(), raw=False)\n        # print(df['vol'].tail(20))\n        # print(df['highest_vol_idx'].tail(20))\n        # print(df['vol'].tail(20))\n        # Calculate how many days have passed since the highest volume appeared\n        # Use a safe approach to handle NaN values\n        df['days_since_highest_vol'] = (df.index - df['highest_vol_idx']).fillna(0).astype(int)\n        # print(df['days_since_highest_vol'].tail(20))\n        # print(df[['days_since_highest_vol']])\n        return df[['days_since_highest_vol']]  # Return DataFrame with the days passed\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"days_since_last_high\"\n\n\n\n    \nclass ExistLowestVOLStrategy(BaseStrategy):\n    \"\"\"This strategy checks how many days have passed since the lowest volume appeared within the last N days.\"\"\"\n    \n    def get_input_parameters(self):\n        \"\"\"Return the required input parameters for the Exist Lowest Volume strategy.\"\"\"\n        return {\n            \"period\": 7  # Default period for volume comparison\n        }\n\n    def calculate(self, df: pd.DataFrame, period: int = 100):\n        df = df.copy()\n        \n        # Find the index of the lowest volume in the rolling window\n        df['lowest_vol_idx'] = df['vol'].rolling(window=period).apply(lambda x: x.idxmin(), raw=False)\n        \n        # Calculate how many days have passed since the lowest volume appeared\n        # Use a safe approach to handle NaN values\n        df['days_since_lowest_vol'] = (df.index - df['lowest_vol_idx']).fillna(0).astype(int)\n        \n        return df[['days_since_lowest_vol']]  # Return DataFrame with the days passed\n    \n    def name(self):\n        \"\"\"Return the name of the strategy in lowercase.\"\"\"\n        return \"days_since_last_low\"\n\n\n\n# for testing\ndef load_parquet(file_path):\n    \"\"\"\n    Load a Parquet file into a Pandas DataFrame.\n    :param file_path: Path to the Parquet file.\n    :return: Pandas DataFrame\n    \"\"\"\n    try:\n        df = pd.read_parquet(file_path)\n        print(f\"Loaded Parquet file from {file_path}\")\n        return df\n    except Exception as e:\n        print(f\"Failed to load Parquet file: {e}\")\n        return None\n    \nif __name__ == \"__main__\":\n    # Load sample stock data\n    parquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..\\\\..', 'data', 'merged_data.parquet'))\n    df = load_parquet(parquet_file_path)\n    df = df[df['ts_code'] == \"00001\"]\n    df = df.copy()  # Explicitly create a copy\n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    df = df[numerical_columns].copy()\n    # print(df)\n    df = df.astype(float)\n    \n    # Calculate RSI\n    strategy = ExistHighestVOLStrategy()\n    ExistHighestStrategy = strategy.calculate(df)\n    ExistHighestStrategy = replace_invalid(ExistHighestStrategy)\n    ",
    "flask_app/strategies/__init__.py": "",
    "flask_app/strategies/strategy_origin/ExistHighestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass ExistHighestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks how many days have passed since the highest volume appeared\n    within the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()\n        df['rolling_max_vol'] = df['vol'].rolling(window=period).max()\n        df['days_since_highest_vol'] = df.apply(\n            lambda row: (row.name - df[df['vol'] == row['rolling_max_vol']].index[-1]).days if row['vol'] == row['rolling_max_vol'] else None, axis=1\n        )\n        \n        return {\n            \"days_since_highest_vol\": df['days_since_highest_vol'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/ExistLowestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass ExistLowestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks how many days have passed since the lowest volume appeared\n    within the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()\n        df['rolling_min_vol'] = df['vol'].rolling(window=period).min()\n        df['days_since_lowest_vol'] = df.apply(\n            lambda row: (row.name - df[df['vol'] == row['rolling_min_vol']].index[-1]).days if row['vol'] == row['rolling_min_vol'] else None, axis=1\n        )\n        \n        return {\n            \"days_since_lowest_vol\": df['days_since_lowest_vol'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/HighestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass HighestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks if the volume of the current day is the highest in the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()  # Work on a copy of the dataframe to avoid changing the original\n        df['rolling_max_vol'] = df['vol'].rolling(window=period).max()\n        df['highest_vol_today'] = df['vol'] == df['rolling_max_vol']\n        \n        return {\n            \"highest_vol_today\": df['highest_vol_today'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/LowestVOLStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass LowestVOLStrategy(BaseStrategy):\n    \"\"\"\n    This strategy checks if the volume of the current day is the lowest in the last N days.\n    \"\"\"\n    def calculate(self, df: pd.DataFrame, period: int):\n        df = df.copy()\n        df['rolling_min_vol'] = df['vol'].rolling(window=period).min()\n        df['lowest_vol_today'] = df['vol'] == df['rolling_min_vol']\n        \n        return {\n            \"lowest_vol_today\": df['lowest_vol_today'].tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/MACDStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\n\nclass MACDStrategy(BaseStrategy):\n    \"\"\"\n    MACD strategy to calculate the MACD line and the Signal line.\n    \"\"\"\n    \n    def calculate(self, df: pd.DataFrame, fast_period, slow_period, signal_period):\n        \"\"\"\n        Calculate the MACD and Signal line.\n        \n        :param df: DataFrame containing stock data.\n        :param fast_period: Period for the fast EMA.\n        :param slow_period: Period for the slow EMA.\n        :param signal_period: Period for the Signal line.\n        :return: Dictionary with MACD line and Signal line.\n        \"\"\"\n        df = df.copy()\n        fast_ema = df['close'].ewm(span=fast_period, adjust=False).mean()\n        slow_ema = df['close'].ewm(span=slow_period, adjust=False).mean()\n        macd = fast_ema - slow_ema\n        signal = macd.ewm(span=signal_period, adjust=False).mean()\n        \n        return {\n            \"macd\": macd.tolist(),\n            \"signal\": signal.tolist()\n        }\n",
    "flask_app/strategies/strategy_origin/RSIStrategy.py": "from strategies.BaseStrategy import BaseStrategy\nimport pandas as pd\nimport os\n\nclass RSIStrategy(BaseStrategy):\n    \"\"\"\n    RSI strategy to calculate the Relative Strength Index.\n    \"\"\"\n\n    def calculate(self, data: pd.DataFrame, period: int = 5):\n        \"\"\"\n        Calculate RSI for the given DataFrame.\n        \n        Parameters:\n            data (DataFrame): Stock data with a 'close' column.\n            period (int): Number of periods for RSI calculation.\n            \n        Returns:\n            dict: RSI values.\n        \"\"\"\n        delta = data['close'].diff()\n        gain = (delta.where(delta > 0, 0)).fillna(0)\n        loss = (-delta.where(delta < 0, 0)).fillna(0)\n        avg_gain = gain.rolling(window=period).mean()\n        avg_loss = loss.rolling(window=period).mean()\n        \n        rs = avg_gain / avg_loss.replace(0, 0.0001)  # Prevent division by zero\n        rsi = 100 - (100 / (1 + rs))\n        rsi = rsi.tolist()\n        rsi = replace_invalid(rsi)\n\n        \n        return rsi\n\ndef replace_invalid(arr):\n    \"\"\"Replace invalid values (NaN) with -1.\"\"\"\n    return [x if pd.notnull(x) else 0 for x in arr]\n\n\n# for testing\ndef load_parquet(file_path):\n    \"\"\"\n    Load a Parquet file into a Pandas DataFrame.\n    :param file_path: Path to the Parquet file.\n    :return: Pandas DataFrame\n    \"\"\"\n    try:\n        df = pd.read_parquet(file_path)\n        print(f\"Loaded Parquet file from {file_path}\")\n        return df\n    except Exception as e:\n        print(f\"Failed to load Parquet file: {e}\")\n        return None\n    \nif __name__ == \"__main__\":\n    # Load sample stock data\n    parquet_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..\\\\..', 'data', 'merged_data.parquet'))\n    df = load_parquet(parquet_file_path)\n    df = df[df['ts_code'] == \"00001\"]\n    df = df.copy()  # Explicitly create a copy\n    numerical_columns = ['open', 'high', 'low', 'close', 'vol', 'amount']\n    df = df[numerical_columns].copy()\n    # print(df)\n    df = df.astype(float)\n    \n    # Calculate RSI\n    strategy = RSIStrategy()\n    rsi = strategy.calculate(df)\n    rsi = replace_invalid(rsi)\n    \n    # print(rsi)",
    "flask_app/templates/dashboard.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/dashboard.css') }}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Welcome, {{ username }}!</h2>\n        <p>This is your protected dashboard.</p>\n        <a href=\"{{ url_for('stock') }}\" class=\"btn btn-primary\">Analyze Stocks</a>\n        <a href=\"{{ url_for('logout') }}\" class=\"btn btn-secondary\">Logout</a>\n    </div>\n</body>\n</html>",
    "flask_app/templates/index.html": "<!-- \n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n</head>\n<body>\n    <h1>Welcome to the Stock Monitor App!</h1>\n    <a href=\"{{ url_for('login') }}\">Login</a>\n</body>\n</html> -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/index.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n</head>\n<body>\n    <div class=\"home-container\">\n        <h1>Welcome to the Stock Monitor App!</h1>\n        <a href=\"{{ url_for('login') }}\" class=\"login-link\">Login</a>\n    </div>\n</body>\n</html>",
    "flask_app/templates/login.html": "<!-- <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n</head>\n<body>\n    <div class=\"login-container\">\n        <h2>Login</h2>\n        <form method=\"POST\">\n            <div class=\"input-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required>\n            </div>\n            <div class=\"remember-group\">\n                <label>\n                    <input type=\"checkbox\" name=\"remember\" id=\"remember\"> \n                    Remember Me\n                </label>\n            </div>\n            <button type=\"submit\" class=\"login-btn\">Login</button>\n        </form>\n        <p class=\"register-link\">Don't have an account? <a href=\"{{ url_for('register') }}\">Register here</a></p>\n        <p class=\"flash-message\" style=\"color:red\">{{ get_flashed_messages() }}</p>\n    </div>\n</body>\n</html> -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/login.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n</head>\n<body>\n    <div class=\"login-container\">\n        <h2>Login</h2>\n        <form method=\"POST\">\n            <div class=\"input-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required>\n            </div>\n            <div class=\"remember-group\">\n                <label>\n                    <input type=\"checkbox\" name=\"remember\" id=\"remember\"> \n                    Remember Me\n                </label>\n            </div>\n            <button type=\"submit\" class=\"login-btn\">Login</button>\n        </form>\n        <p class=\"register-link\">Don't have an account? <a href=\"{{ url_for('register') }}\">Register here</a></p>\n        <p class=\"flash-message\" style=\"color:red\">{{ get_flashed_messages() }}</p>\n    </div>\n</body>\n</html>",
    "flask_app/templates/register.html": "<!-- <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Register</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/style.css') }}\">\n</head>\n<body>\n    <h2>Create an Account</h2>\n    <form method=\"POST\">\n        <label for=\"username\">Username</label>\n        <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required><br><br>\n\n        <label for=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\" required><br><br>\n\n        <label for=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required><br><br>\n\n        <label for=\"password2\">Confirm Password</label>\n        <input type=\"password\" id=\"password2\" name=\"password2\" placeholder=\"Confirm your password\" required><br><br>\n\n        <button type=\"submit\">Register</button>\n    </form>\n    <p style=\"color:red\">{{ get_flashed_messages() }}</p>\n</body>\n</html> -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Register</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='/css/register.css') }}\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n</head>\n<body>\n    <div class=\"register-container\">\n        <h2>Create an Account</h2>\n        <form method=\"POST\">\n            <div class=\"input-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"email\">Email</label>\n                <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"password2\">Confirm Password</label>\n                <input type=\"password\" id=\"password2\" name=\"password2\" placeholder=\"Confirm your password\" required>\n            </div>\n            <button type=\"submit\" class=\"register-btn\">Register</button>\n        </form>\n        <p class=\"login-link\">Already have an account? <a href=\"{{ url_for('login') }}\">Login here</a></p>\n        <p class=\"flash-message\" style=\"color:red\">{{ get_flashed_messages() }}</p>\n    </div>\n</body>\n</html>",
    "flask_app/templates/stock.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Stock Analytics</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/global.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/index.css') }}\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/stock.css') }}\">\n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"></script>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <script src=\"{{ url_for('static', filename='js/chart_utils.js') }}\"></script>\n    <!-- <script src=\"{{ url_for('static', filename='js/subchart_manager.js') }}\"></script> -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n</head>\n<body>\n    <div class=\"stock-container\">\n        <h2>Stock Analyzer</h2>\n        <div class=\"search-container\">\n            <div class=\"input-group\">\n                <label for=\"stockInput\">Stock Code</label>\n                <!-- Set default value to \"00001\" -->\n                <input type=\"text\" id=\"stockInput\" name=\"stockInput\" placeholder=\"Enter ts_code\" class=\"form-control\" value=\"00001\" onkeypress=\"if (event.which == 13) searchStock()\">\n            </div>\n        </div>\n        <div class=\"subchart-controls\">\n            <label for=\"subchartCount\">Subcharts:</label>\n            <select id=\"subchartCount\" onchange=\"updateSubcharts()\">\n                <option value=\"0\">0</option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n            </select>\n            <div class=\"subchart-selectors-container\"></div>\n        </div>\n        <div class=\"interaction-panel\">\n            <button onclick=\"resetChart()\" class=\"btn btn-sm\">Reset View</button>\n        </div>\n        <div id=\"stockChart\" class=\"chart-container\"></div>        \n    </div>\n</body>\n</html>"
}